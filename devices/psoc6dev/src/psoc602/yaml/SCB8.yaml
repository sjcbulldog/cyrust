---
block/SCB0:
  description: Serial Communications Block (SPI/UART/I2C)
  items:
    - name: CTRL
      description: Generic control
      byte_offset: 0
      fieldset: CTRL
    - name: STATUS
      description: Generic status
      byte_offset: 4
      access: Read
      fieldset: STATUS
    - name: CMD_RESP_CTRL
      description: Command/response control
      byte_offset: 8
      fieldset: CMD_RESP_CTRL
    - name: CMD_RESP_STATUS
      description: Command/response status
      byte_offset: 12
      access: Read
      fieldset: CMD_RESP_STATUS
    - name: SPI_CTRL
      description: SPI control
      byte_offset: 32
      fieldset: SPI_CTRL
    - name: SPI_STATUS
      description: SPI status
      byte_offset: 36
      access: Read
      fieldset: SPI_STATUS
    - name: UART_CTRL
      description: UART control
      byte_offset: 64
      fieldset: UART_CTRL
    - name: UART_TX_CTRL
      description: UART transmitter control
      byte_offset: 68
      fieldset: UART_TX_CTRL
    - name: UART_RX_CTRL
      description: UART receiver control
      byte_offset: 72
      fieldset: UART_RX_CTRL
    - name: UART_RX_STATUS
      description: UART receiver status
      byte_offset: 76
      access: Read
      fieldset: UART_RX_STATUS
    - name: UART_FLOW_CTRL
      description: UART flow control
      byte_offset: 80
      fieldset: UART_FLOW_CTRL
    - name: I2C_CTRL
      description: I2C control
      byte_offset: 96
      fieldset: I2C_CTRL
    - name: I2C_STATUS
      description: I2C status
      byte_offset: 100
      access: Read
      fieldset: I2C_STATUS
    - name: I2C_M_CMD
      description: I2C master command
      byte_offset: 104
      fieldset: I2C_M_CMD
    - name: I2C_S_CMD
      description: I2C slave command
      byte_offset: 108
      fieldset: I2C_S_CMD
    - name: I2C_CFG
      description: I2C configuration
      byte_offset: 112
      fieldset: I2C_CFG
    - name: TX_CTRL
      description: Transmitter control
      byte_offset: 512
      fieldset: TX_CTRL
    - name: TX_FIFO_CTRL
      description: Transmitter FIFO control
      byte_offset: 516
      fieldset: TX_FIFO_CTRL
    - name: TX_FIFO_STATUS
      description: Transmitter FIFO status
      byte_offset: 520
      access: Read
      fieldset: TX_FIFO_STATUS
    - name: TX_FIFO_WR
      description: Transmitter FIFO write
      byte_offset: 576
      access: Write
      fieldset: TX_FIFO_WR
    - name: RX_CTRL
      description: Receiver control
      byte_offset: 768
      fieldset: RX_CTRL
    - name: RX_FIFO_CTRL
      description: Receiver FIFO control
      byte_offset: 772
      fieldset: RX_FIFO_CTRL
    - name: RX_FIFO_STATUS
      description: Receiver FIFO status
      byte_offset: 776
      access: Read
      fieldset: RX_FIFO_STATUS
    - name: RX_MATCH
      description: Slave address and mask
      byte_offset: 784
      fieldset: RX_MATCH
    - name: RX_FIFO_RD
      description: Receiver FIFO read
      byte_offset: 832
      access: Read
      fieldset: RX_FIFO_RD
    - name: RX_FIFO_RD_SILENT
      description: Receiver FIFO read silent
      byte_offset: 836
      access: Read
      fieldset: RX_FIFO_RD_SILENT
    - name: INTR_CAUSE
      description: Active clocked interrupt signal
      byte_offset: 3584
      access: Read
      fieldset: INTR_CAUSE
    - name: INTR_I2C_EC
      description: Externally clocked I2C interrupt request
      byte_offset: 3712
      fieldset: INTR_I2C_EC
    - name: INTR_I2C_EC_MASK
      description: Externally clocked I2C interrupt mask
      byte_offset: 3720
      fieldset: INTR_I2C_EC_MASK
    - name: INTR_I2C_EC_MASKED
      description: Externally clocked I2C interrupt masked
      byte_offset: 3724
      access: Read
      fieldset: INTR_I2C_EC_MASKED
    - name: INTR_SPI_EC
      description: Externally clocked SPI interrupt request
      byte_offset: 3776
      fieldset: INTR_SPI_EC
    - name: INTR_SPI_EC_MASK
      description: Externally clocked SPI interrupt mask
      byte_offset: 3784
      fieldset: INTR_SPI_EC_MASK
    - name: INTR_SPI_EC_MASKED
      description: Externally clocked SPI interrupt masked
      byte_offset: 3788
      access: Read
      fieldset: INTR_SPI_EC_MASKED
    - name: INTR_M
      description: Master interrupt request
      byte_offset: 3840
      fieldset: INTR_M
    - name: INTR_M_SET
      description: Master interrupt set request
      byte_offset: 3844
      fieldset: INTR_M_SET
    - name: INTR_M_MASK
      description: Master interrupt mask
      byte_offset: 3848
      fieldset: INTR_M_MASK
    - name: INTR_M_MASKED
      description: Master interrupt masked request
      byte_offset: 3852
      access: Read
      fieldset: INTR_M_MASKED
    - name: INTR_S
      description: Slave interrupt request
      byte_offset: 3904
      fieldset: INTR_S
    - name: INTR_S_SET
      description: Slave interrupt set request
      byte_offset: 3908
      fieldset: INTR_S_SET
    - name: INTR_S_MASK
      description: Slave interrupt mask
      byte_offset: 3912
      fieldset: INTR_S_MASK
    - name: INTR_S_MASKED
      description: Slave interrupt masked request
      byte_offset: 3916
      access: Read
      fieldset: INTR_S_MASKED
    - name: INTR_TX
      description: Transmitter interrupt request
      byte_offset: 3968
      fieldset: INTR_TX
    - name: INTR_TX_SET
      description: Transmitter interrupt set request
      byte_offset: 3972
      fieldset: INTR_TX_SET
    - name: INTR_TX_MASK
      description: Transmitter interrupt mask
      byte_offset: 3976
      fieldset: INTR_TX_MASK
    - name: INTR_TX_MASKED
      description: Transmitter interrupt masked request
      byte_offset: 3980
      access: Read
      fieldset: INTR_TX_MASKED
    - name: INTR_RX
      description: Receiver interrupt request
      byte_offset: 4032
      fieldset: INTR_RX
    - name: INTR_RX_SET
      description: Receiver interrupt set request
      byte_offset: 4036
      fieldset: INTR_RX_SET
    - name: INTR_RX_MASK
      description: Receiver interrupt mask
      byte_offset: 4040
      fieldset: INTR_RX_MASK
    - name: INTR_RX_MASKED
      description: Receiver interrupt masked request
      byte_offset: 4044
      access: Read
      fieldset: INTR_RX_MASKED
fieldset/CMD_RESP_CTRL:
  description: Command/response control
  fields:
    - name: BASE_RD_ADDR
      description: "I2C/SPI read base address for CMD_RESP mode. Address is used by a I2C CMD_RESP mode read transfer (CTRL.MODE is I2C) or a SPI CMD_RESP mode read transfer (CTRL.MODE is SPI): at the start of a read transfer BASE_RD_ADDR is copied to CMD_RESP_STATUS.CURR_RD_ADDR. This field should not be modified during ongoing bus transfers."
      bit_offset: 0
      bit_size: 9
    - name: BASE_WR_ADDR
      description: "I2C/SPI write base address for CMD_RESP mode. Address is used by a I2C CMD_RESP mode write transfer (CTRL.MODE is I2C) or a SPI CMD_RESP mode write transfer (CTRL.MODE is SPI): at the start of a write transfer BASE_WE_ADDR is copied to CMD_RESP_STATUS.CURR_WR_ADDR. This field should not be modified during ongoing bus transfers."
      bit_offset: 16
      bit_size: 9
fieldset/CMD_RESP_STATUS:
  description: Command/response status
  fields:
    - name: CURR_RD_ADDR
      description: "I2C/SPI read current address for CMD_RESP mode. HW increments the field after a read access to the memory buffer. However, when the last memory buffer address is reached, the address is NOT incremented (but remains at the maximum memory buffer address). The field is used to determine how many bytes have been read (# bytes = CURR_RD_ADDR - CMD_RESP_CTRL.BASE_RD_ADDR). This field is reliable during when there is no bus transfer. This field is potentially unreliable when there is a bus transfer bus transfer: when CMD_RESP_EC_BUSY is '0', the field is reliable."
      bit_offset: 0
      bit_size: 9
    - name: CURR_WR_ADDR
      description: "I2C/SPI write current address for CMD_RESP mode. HW increments the field after a read access to the memory buffer. However, when the last memory buffer address is reached, the address is NOT incremented (but remains at the maximum memory buffer address). The field is used to determine how many bytes have been written (# bytes = CURR_WR_ADDR - CMD_RESP_CTRL.BASE_WR_ADDR). This field is reliable during when there is no bus transfer. This field is potentially unreliable when there is a bus transfer bus transfer: when CMD_RESP_EC_BUSY is '0', the field is reliable."
      bit_offset: 16
      bit_size: 9
    - name: CMD_RESP_EC_BUS_BUSY
      description: "Indicates whether there is an ongoing bus transfer to the IP. '0': no ongoing bus transfer. '1': ongoing bus transfer. For SPI, the field is '1' when the slave is selected. For I2C, the field is set to '1' at a I2C START/RESTART. In case of an address match, the field is set to '0' on a I2C STOP. In case of NO address match, the field is set to '0' after the failing address match."
      bit_offset: 30
      bit_size: 1
    - name: CMD_RESP_EC_BUSY
      description: "Indicates whether the CURR_RD_ADDR and CURR_WR_ADDR fields in this register are reliable (when CMD_RESP_EC_BUSY is '0') or not reliable (when CMD_RESP_EC_BUSY is '1'). Note: - When there is no ongoing bus transfer, CMD_RESP_EC_BUSY is '0' (reliable). - When there is a ongoing bus transfer, CMD_RESP_EC_BUSY is '0' (reliable), when the CURR_RD_ADDR and CURR_WR_ADDR are not being updated by the HW. - When there is a ongoing bus transfer, CMD_RESP_EC_BUSY is '1' (not reliable), when the CURR_RD_ADDR or CURR_WR_ADDR are being updated by the HW. Note that this update lasts one I2C clock cycle, or two SPI clock cycles."
      bit_offset: 31
      bit_size: 1
fieldset/CTRL:
  description: Generic control
  fields:
    - name: OVS
      description: N/A
      bit_offset: 0
      bit_size: 4
    - name: EC_AM_MODE
      description: "Internally clocked mode ('0') or externally clocked mode ('1') address matching (I2C) or selection (SPI). In internally clocked mode, the serial interface protocols run off the peripheral clock. In externally clocked mode, the serial interface protocols run off the clock as provided by the serial interface. Externally clocked mode is only used for synchronous serial interface protocols (SPI and I2C) in slave mode. In SPI mode, only Motorola submode (all Motorola modes: 0, 1, 2, 3) is supported. In UART mode this field should be '0'."
      bit_offset: 8
      bit_size: 1
    - name: EC_OP_MODE
      description: "Internally clocked mode ('0') or externally clocked mode ('1') operation. In internally clocked mode, the serial interface protocols run off the peripheral clock. In externally clocked mode, the serial interface protocols run off the clock as provided by the serial interface. Externally clocked operation mode is only used for synchronous serial interface protocols (SPI and I2C) in slave mode AND EZ mode. In SPI mode, only Motorola submode (all Motorola modes: 0, 1, 2, 3) is supported. The maximum SPI slave, EZ mode bitrate is 48 Mbps (transmission and IO delays outside the IP will degrade the effective bitrate). In UART mode this field should be '0'."
      bit_offset: 9
      bit_size: 1
    - name: EZ_MODE
      description: "Non EZ mode ('0') or EZ mode ('1'). In EZ mode, a meta protocol is applied to the serial interface protocol. This meta protocol adds meaning to the data frames transferred by the serial interface protocol: a data frame can represent a memory address, a write memory data element or a read memory data element. EZ mode is only used for synchronous serial interface protocols: SPI and I2C. In SPI mode, only Motorola submode (all Motorola modes: 0, 1, 2, 3) is supported and the transmitter should use continuous data frames; i.e. data frames mot separated by slave deselection. This mode is only applicable to slave functionality. In EZ mode, the slave can read from and write to an addressable memory structure of up to 256 bytes. In EZ mode, data frames should 8-bit in size and should be transmitted and received with the Most Significant Bit (MSB) first. In UART mode this field should be '0'."
      bit_offset: 10
      bit_size: 1
    - name: BYTE_MODE
      description: "Determines the number of bits per FIFO data element: '0': 16-bit FIFO data elements. '1': 8-bit FIFO data elements. This mode doubles the amount of FIFO entries, but TX_CTRL.DATA_WIDTH and RX_CTRL.DATA_WIDTH are restricted to [0, 7]."
      bit_offset: 11
      bit_size: 1
    - name: CMD_RESP_MODE
      description: "Determines CMD_RESP mode of operation: '0': CMD_RESP mode disabled. '1': CMD_RESP mode enabled (also requires EC_AM_MODE and EC_OP_MODE to be set to '1')."
      bit_offset: 12
      bit_size: 1
    - name: ADDR_ACCEPT
      description: "Determines whether a received matching address is accepted in the RX FIFO ('1') or not ('0'). In I2C mode, this field is used to allow the slave to put the received slave address or general call address in the RX FIFO. Note that a received matching address is put in the RX FIFO when ADDR_ACCEPT is '1' for both I2C read and write transfers. In multi-processor UART receiver mode, this field is used to allow the receiver to put the received address in the RX FIFO. Note: non-matching addresses are never put in the RX FIFO."
      bit_offset: 16
      bit_size: 1
    - name: BLOCK
      description: "Only used in externally clocked mode. If the externally clocked logic and the MMIO SW accesses to EZ memory coincide/collide, this bit determines whether a SW access should block and result in bus wait states ('BLOCK is 1') or not (BLOCK is '0'). IF BLOCK is '0' and the accesses collide, MMIO read operations return 0xffff:ffff and MMIO write operations are ignored. Colliding accesses are registered as interrupt causes: field BLOCKED of MMIO registers INTR_TX and INTR_RX."
      bit_offset: 17
      bit_size: 1
    - name: MODE
      description: N/A
      bit_offset: 24
      bit_size: 2
      enum: CTRL_MODE
    - name: ENABLED
      description: "IP enabled ('1') or not ('0'). The proper order in which to initialize the IP is as follows: - Program protocol specific information using SPI_CTRL, UART_CTRL (and UART_TX_CTRL and UART_RX_CTRL) or I2C_CTRL. This includes selection of a submode, master/slave functionality and transmitter/receiver functionality when applicable. - Program generic transmitter (TX_CTRL) and receiver (RX_CTRL) information. This includes enabling of the transmitter and receiver functionality. - Program transmitter FIFO (TX_FIFO_CTRL) and receiver FIFO (RX_FIFO_CTRL) information. - Program CTRL to enable IP, select the specific operation mode and oversampling factor. When the IP is enabled, no control information should be changed. Changes should be made AFTER disabling the IP, e.g. to modify the operation mode (from I2C to SPI) or to go from externally to internally clocked. The change takes effect after the IP is re-enabled. Note that disabling the IP will cause re-initialization of the design and associated state is lost (e.g. FIFO content)."
      bit_offset: 31
      bit_size: 1
fieldset/I2C_CFG:
  description: I2C configuration
  fields:
    - name: SDA_IN_FILT_TRIM
      description: "Trim bits for 'i2c_sda_in' 50 ns filter. See s8i2cs BROS (001-59539) for more details on the trim bit values. SDA_IN_FILT_TRIM[1] is used to enable I2CS_EC or SPIS_EC access to internal SRAM memory. 1: enable clock_scb_en, has no effect on ec_busy_pp 0: disable clock_scb_en, enable ec_busy_pp (grant I2CS_EC or SPIS_EC access)"
      bit_offset: 0
      bit_size: 2
    - name: SDA_IN_FILT_SEL
      description: "Selection of 'i2c_sda_in' filter delay: '0': 0 ns. '1: 50 ns (filter enabled)."
      bit_offset: 4
      bit_size: 1
    - name: SCL_IN_FILT_TRIM
      description: "Trim bits for 'i2c_scl_in' 50 ns filter. See s8i2cs BROS (001-59539) for more details on the trim bit values."
      bit_offset: 8
      bit_size: 2
    - name: SCL_IN_FILT_SEL
      description: "Selection of 'i2c_scl_in' filter delay: '0': 0 ns. '1: 50 ns (filter enabled)."
      bit_offset: 12
      bit_size: 1
    - name: SDA_OUT_FILT0_TRIM
      description: "Trim bits for 'i2c_sda_out' 50 ns filter 0. See s8i2cs BROS (001-59539) for more details on the trim bit values."
      bit_offset: 16
      bit_size: 2
    - name: SDA_OUT_FILT1_TRIM
      description: "Trim bits for 'i2c_sda_out' 50 ns filter 1. See s8i2cs BROS (001-59539) for more details on the trim bit values."
      bit_offset: 18
      bit_size: 2
    - name: SDA_OUT_FILT2_TRIM
      description: "Trim bits for 'i2c_sda_out' 50 ns filter 2. See s8i2cs BROS (001-59539) for more details on the trim bit values."
      bit_offset: 20
      bit_size: 2
    - name: SDA_OUT_FILT_SEL
      description: "Selection of cumulative 'i2c_sda_out' filter delay: '0': 0 ns. '1': 50 ns (filter 0 enabled). '2': 100 ns (filters 0 and 1 enabled). '3': 150 ns (filters 0, 1 and 2 enabled)."
      bit_offset: 28
      bit_size: 2
fieldset/I2C_CTRL:
  description: I2C control
  fields:
    - name: HIGH_PHASE_OVS
      description: "Serial I2C interface high phase oversampling factor. HIGH_PHASE_OVS + 1 peripheral clock periods constitute the high phase of a bit period. The valid range is [5, 15] with input signal median filtering and [4, 15] without input signal median filtering. The field is only used in master mode. In slave mode, the field is NOT used. However, there is a frequency requirement for the IP clock wrt. the regular interface (IF) high time to guarantee functional correct behavior. With input signal median filtering, the IF high time should be >= 6 IP clock cycles and <= 16 IP clock cycles. Without input signal median filtering, the IF high time should be >= 5 IP clock cycles and <= 16 IP clock cycles."
      bit_offset: 0
      bit_size: 4
    - name: LOW_PHASE_OVS
      description: "Serial I2C interface low phase oversampling factor. LOW_PHASE_OVS + 1 peripheral clock periods constitute the low phase of a bit period. The valid range is [7, 15] with input signal median filtering and [6, 15] without input signal median filtering. The field is only used in master mode. In slave mode, the field is NOT used. However, there is a frequency requirement for the IP clock wrt. the regular (no stretching) interface (IF) low time to guarantee functional correct behavior. With input signal median filtering, the IF low time should be >= 8 IP clock cycles and <= 16 IP clock cycles. Without input signal median filtering, the IF low time should be >= 7 IP clock cycles and <= 16 IP clock cycles."
      bit_offset: 4
      bit_size: 4
    - name: M_READY_DATA_ACK
      description: "When '1', a received data element by the master is immediately ACK'd when the receiver FIFO is not full."
      bit_offset: 8
      bit_size: 1
    - name: M_NOT_READY_DATA_NACK
      description: "When '1', a received data element byte the master is immediately NACK'd when the receiver FIFO is full. When '0', clock stretching is used instead (till the receiver FIFO is no longer full)."
      bit_offset: 9
      bit_size: 1
    - name: S_GENERAL_IGNORE
      description: "When '1', a received general call slave address is immediately NACK'd (no ACK or clock stretching) and treated as a non matching slave address. This is useful for slaves that do not need any data supplied within the general call structure."
      bit_offset: 11
      bit_size: 1
    - name: S_READY_ADDR_ACK
      description: "When '1', a received (matching) slave address is immediately ACK'd when the receiver FIFO is not full. In EZ mode, this field should be set to '1'."
      bit_offset: 12
      bit_size: 1
    - name: S_READY_DATA_ACK
      description: "When '1', a received data element by the slave is immediately ACK'd when the receiver FIFO is not full. In EZ mode, this field should be set to '1'."
      bit_offset: 13
      bit_size: 1
    - name: S_NOT_READY_ADDR_NACK
      description: "For internally clocked logic (EC_AM is '0' and EC_OP is '0') on an address match or general call address (and S_GENERAL_IGNORE is '0'). Only used when: - EC_AM is '0', EC_OP is '0' and non EZ mode. Functionality is as follows: - 1: a received (matching) slave address is immediately NACK'd when the receiver FIFO is full. - 0: clock stretching is performed (till the receiver FIFO is no longer full). For externally clocked logic (EC_AM is '1') on an address match or general call address (and S_GENERAL_IGNORE is '0'). Only used when (NOT used when EC_AM is '1' and EC_OP is '1' and address match and EZ mode): - EC_AM is '1' and EC_OP is '0'. - EC_AM is '1' and general call address match. - EC_AM is '1' and non EZ mode. Functionality is as follows: - 1: a received (matching or general) slave address is always immediately NACK'd. There are two possibilities: 1). the internally clocked logic is enabled (we are in Active system power mode) and it handles the rest of the current transfer. In this case the I2C master will not observe the NACK. 2). the internally clocked logic is not enabled (we are in DeepSleep system power mode). In this case the I2C master will observe the NACK and may retry the transfer in the future (which gives the internally clocked logic the time to wake up from DeepSleep system power mode). - 0: clock stretching is performed (till the internally clocked logic takes over). The internally clocked logic will handle the ongoing transfer as soon as it is enabled."
      bit_offset: 14
      bit_size: 1
    - name: S_NOT_READY_DATA_NACK
      description: "For internally clocked logic only. Only used when: - non EZ mode. Functionality is as follows: - 1: a received data element byte the slave is immediately NACK'd when the receiver FIFO is full. - 0: clock stretching is performed (till the receiver FIFO is no longer full)."
      bit_offset: 15
      bit_size: 1
    - name: LOOPBACK
      description: "Local loopback control (does NOT affect the information on the pins). Only applicable in master/slave mode. When '0', the I2C SCL and SDA lines are connected to the I2C SCL and SDA pins. When '1', I2C SCL and SDA lines are routed internally in the peripheral, and as a result unaffected by other I2C devices. This allows a SCB I2C peripheral to address itself."
      bit_offset: 16
      bit_size: 1
    - name: SLAVE_MODE
      description: "Slave mode enabled ('1') or not ('0')."
      bit_offset: 30
      bit_size: 1
    - name: MASTER_MODE
      description: "Master mode enabled ('1') or not ('0'). Note that both master and slave modes can be enabled at the same time. This allows the IP to address itself."
      bit_offset: 31
      bit_size: 1
fieldset/I2C_M_CMD:
  description: I2C master command
  fields:
    - name: M_START
      description: "When '1', transmit a START or REPEATED START. Whether a START or REPEATED START is transmitted depends on the state of the master state machine. A START is only transmitted when the master state machine is in the default state. A REPEATED START is transmitted when the master state machine is not in the default state, but is working on an ongoing transaction. The REPEATED START can only be transmitted after a NACK or ACK has been received for a transmitted data element or after a NACK has been transmitted for a received data element. When this action is performed, the hardware sets this field to '0'."
      bit_offset: 0
      bit_size: 1
    - name: M_START_ON_IDLE
      description: "When '1', transmit a START as soon as the bus is idle (I2C_STATUS.BUS_BUSY is '0', note that BUSY has a default value of '0'). For bus idle detection the hardware relies on STOP detection. As a result, bus idle detection is only functional after at least one I2C bus transfer has been detected on the bus (default/reset value of BUSY is '0') . A START is only transmitted when the master state machine is in the default state. When this action is performed, the hardware sets this field to '0'."
      bit_offset: 1
      bit_size: 1
    - name: M_ACK
      description: "When '1', attempt to transmit an acknowledgement (ACK). When this action is performed, the hardware sets this field to '0'."
      bit_offset: 2
      bit_size: 1
    - name: M_NACK
      description: "When '1', attempt to transmit a negative acknowledgement (NACK). When this action is performed, the hardware sets this field to '0'."
      bit_offset: 3
      bit_size: 1
    - name: M_STOP
      description: "When '1', attempt to transmit a STOP. When this action is performed, the hardware sets this field to '0'. I2C_M_CMD.M_START has a higher priority than this command: in situations where both a STOP and a REPEATED START could be transmitted, M_START takes precedence over M_STOP."
      bit_offset: 4
      bit_size: 1
fieldset/I2C_STATUS:
  description: I2C status
  fields:
    - name: BUS_BUSY
      description: "I2C bus is busy. The bus is considered busy ('1'), from the time a START is detected or from the time the SCL line is '0'. The bus is considered idle ('0'), from the time a STOP is detected. If the IP is disabled, BUS_BUSY is '0'. After enabling the IP, it takes time for the BUS_BUSY to detect a busy bus. This time is the maximum high time of the SCL line. For a 100 kHz interface frequency, this maximum high time may last roughly 5 us (half a bit period). For single master systems, BUS_BUSY does not have to be used to detect an idle bus before a master starts a transfer using I2C_M_CMD.M_START (no bus collisions). For multi-master systems, BUS_BUSY can be used to detect an idle bus before a master starts a transfer using I2C_M_CMD.M_START_ON_IDLE (to prevent bus collisions)."
      bit_offset: 0
      bit_size: 1
    - name: I2C_EC_BUSY
      description: Indicates whether the externally clocked logic is potentially accessing the EZ memory and/or updating BASE_EZ_ADDR or CURR_EZ_ADDR (this is only possible in EZ mode). This bit can be used by SW to determine whether BASE_EZ_ADDR and CURR_EZ_ADDR are reliable.
      bit_offset: 1
      bit_size: 1
    - name: S_READ
      description: "I2C slave read transfer ('1') or I2C slave write transfer ('0'). When the I2C slave is inactive/idle or receiving START, REPEATED START, STOP or an address, this field is '0''."
      bit_offset: 4
      bit_size: 1
    - name: M_READ
      description: "I2C master read transfer ('1') or I2C master write transfer ('0'). When the I2C master is inactive/idle or transmitting START, REPEATED START, STOP or an address, this field is '0''."
      bit_offset: 5
      bit_size: 1
    - name: CURR_EZ_ADDR
      description: "I2C slave current EZ address. Current address pointer. This field is only reliable in internally clocked mode. In externally clocked mode the field may be unreliable (during an ongoing transfer when I2C_EC_BUSY is '1'), as clock domain synchronization is not performed in the design."
      bit_offset: 8
      bit_size: 8
    - name: BASE_EZ_ADDR
      description: "I2C slave base EZ address. Address as provided by an I2C write transfer. This field is only reliable in internally clocked mode. In externally clocked mode the field may be unreliable, as clock domain synchronization is not performed in the design."
      bit_offset: 16
      bit_size: 8
fieldset/I2C_S_CMD:
  description: I2C slave command
  fields:
    - name: S_ACK
      description: "When '1', attempt to transmit an acknowledgement (ACK). When this action is performed, the hardware sets this field to '0'. In EZ mode, this field should be set to '0' (it is only to be used in non EZ mode)."
      bit_offset: 0
      bit_size: 1
    - name: S_NACK
      description: "When '1', attempt to transmit a negative acknowledgement (NACK). When this action is performed, the hardware sets this field to '0'. In EZ mode, this field should be set to '0' (it is only to be used in non EZ mode). This command has a higher priority than I2C_S_CMD.S_ACK, I2C_CTRL.S_READY_ADDR_ACK or I2C_CTRL.S_READY_DATA_ACK."
      bit_offset: 1
      bit_size: 1
fieldset/INTR_CAUSE:
  description: Active clocked interrupt signal
  fields:
    - name: M
      description: "Master interrupt active ('interrupt_master'): INTR_M_MASKED != 0."
      bit_offset: 0
      bit_size: 1
    - name: S
      description: "Slave interrupt active ('interrupt_slave'): INTR_S_MASKED != 0."
      bit_offset: 1
      bit_size: 1
    - name: TX
      description: "Transmitter interrupt active ('interrupt_tx'): INTR_TX_MASKED != 0."
      bit_offset: 2
      bit_size: 1
    - name: RX
      description: "Receiver interrupt active ('interrupt_rx'): INTR_RX_MASKED != 0."
      bit_offset: 3
      bit_size: 1
    - name: I2C_EC
      description: "Externally clock I2C interrupt active ('interrupt_i2c_ec'): INTR_I2C_EC_MASKED != 0."
      bit_offset: 4
      bit_size: 1
    - name: SPI_EC
      description: "Externally clocked SPI interrupt active ('interrupt_spi_ec'): INTR_SPI_EC_MASKED != 0."
      bit_offset: 5
      bit_size: 1
fieldset/INTR_I2C_EC:
  description: Externally clocked I2C interrupt request
  fields:
    - name: WAKE_UP
      description: "Wake up request. Active on incoming slave request (with address match). Only used when EC_AM is '1'."
      bit_offset: 0
      bit_size: 1
    - name: EZ_STOP
      description: "STOP detection. Activated on the end of a every transfer (I2C STOP). Only available for a slave request with an address match, in EZ and CMD_RESP modes, when EC_OP is '1'."
      bit_offset: 1
      bit_size: 1
    - name: EZ_WRITE_STOP
      description: "STOP detection after a write transfer occurred. Activated on the end of a write transfer (I2C STOP). This event is an indication that a buffer memory location has been written to. For EZ mode: a transfer that only writes the base address does NOT activate this event. Only available for a slave request with an address match, in EZ and CMD_RESP modes, when EC_OP is '1'."
      bit_offset: 2
      bit_size: 1
    - name: EZ_READ_STOP
      description: "STOP detection after a read transfer occurred. Activated on the end of a read transfer (I2C STOP). This event is an indication that a buffer memory location has been read from. Only available for a slave request with an address match, in EZ and CMD_RESP modes, when EC_OP is '1'."
      bit_offset: 3
      bit_size: 1
fieldset/INTR_I2C_EC_MASK:
  description: Externally clocked I2C interrupt mask
  fields:
    - name: WAKE_UP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: EZ_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 1
      bit_size: 1
    - name: EZ_WRITE_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 2
      bit_size: 1
    - name: EZ_READ_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 3
      bit_size: 1
fieldset/INTR_I2C_EC_MASKED:
  description: Externally clocked I2C interrupt masked
  fields:
    - name: WAKE_UP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: EZ_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 1
      bit_size: 1
    - name: EZ_WRITE_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 2
      bit_size: 1
    - name: EZ_READ_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 3
      bit_size: 1
fieldset/INTR_M:
  description: Master interrupt request
  fields:
    - name: I2C_ARB_LOST
      description: "I2C master lost arbitration: the value driven by the master on the SDA line is not the same as the value observed on the SDA line."
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: "I2C master negative acknowledgement. Set to '1', when the master receives a NACK (typically after the master transmitted the slave address or TX data)."
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: "I2C master acknowledgement. Set to '1', when the master receives a ACK (typically after the master transmitted the slave address or TX data)."
      bit_offset: 2
      bit_size: 1
    - name: I2C_STOP
      description: "I2C master STOP. Set to '1', when the master has transmitted a STOP."
      bit_offset: 4
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: I2C master bus error (unexpected detection of START or STOP condition).
      bit_offset: 8
      bit_size: 1
    - name: SPI_DONE
      description: "SPI master transfer done event: all data frames in the transmit FIFO are sent, the transmit FIFO is empty (both TX FIFO and transmit shifter register are empty), and SPI select output pin is deselected."
      bit_offset: 9
      bit_size: 1
fieldset/INTR_M_MASK:
  description: Master interrupt mask
  fields:
    - name: I2C_ARB_LOST
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 2
      bit_size: 1
    - name: I2C_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 4
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 8
      bit_size: 1
    - name: SPI_DONE
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 9
      bit_size: 1
fieldset/INTR_M_MASKED:
  description: Master interrupt masked request
  fields:
    - name: I2C_ARB_LOST
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: Logical and of corresponding request and mask bits.
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: Logical and of corresponding request and mask bits.
      bit_offset: 2
      bit_size: 1
    - name: I2C_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 4
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: Logical and of corresponding request and mask bits.
      bit_offset: 8
      bit_size: 1
    - name: SPI_DONE
      description: Logical and of corresponding request and mask bits.
      bit_offset: 9
      bit_size: 1
fieldset/INTR_M_SET:
  description: Master interrupt set request
  fields:
    - name: I2C_ARB_LOST
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 2
      bit_size: 1
    - name: I2C_STOP
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 4
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 8
      bit_size: 1
    - name: SPI_DONE
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 9
      bit_size: 1
fieldset/INTR_RX:
  description: Receiver interrupt request
  fields:
    - name: TRIGGER
      description: More entries in the RX FIFO than the value specified by RX_FIFO_CTRL.TRIGGER_LEVEL. Only used in FIFO mode.
      bit_offset: 0
      bit_size: 1
    - name: NOT_EMPTY
      description: RX FIFO is not empty. Only used in FIFO mode.
      bit_offset: 2
      bit_size: 1
    - name: FULL
      description: "RX FIFO is full. Note that received data frames are lost when the RX FIFO is full. Dependent on CTRL.BYTE_MODE: (FF_DATA_NR = EZ_DATA_NR/2) BYTE_MODE is '0': # entries == FF_DATA_NR/2. BYTE_MODE is '1': # entries == FF_DATA_NR. Only used in FIFO mode."
      bit_offset: 3
      bit_size: 1
    - name: OVERFLOW
      description: "Attempt to write to a full RX FIFO. Note: in I2C mode, the OVERFLOW is set when a data frame is received and the RX FIFO is full, independent of whether it is ACK'd or NACK'd. Only used in FIFO mode."
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: Attempt to read from an empty RX FIFO. Only used in FIFO mode.
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: "AHB-Lite read transfer can not get access to the EZ memory (EZ_DATA accesses), due to an externally clocked EZ access. This may happen when STATUS.EC_BUSY is '1'."
      bit_offset: 7
      bit_size: 1
    - name: FRAME_ERROR
      description: "Frame error in received data frame. Set to '1', when event is detected. Write with '1' to clear bit. This can be either a start or stop bit(s) error: Start bit error: after the detection of the beginning of a start bit period (RX line changes from '1' to '0'), the middle of the start bit period is sampled erroneously (RX line is '1'). Note: a start bit error is detected BEFORE a data frame is received. Stop bit error: the RX line is sampled as '0', but a '1' was expected. Note: a stop bit error may result in failure to receive successive data frame(s). Note: a stop bit error is detected AFTER a data frame is received. A stop bit error is detected after a data frame is received, and the UART_RX_CTL.DROP_ON_FRAME_ERROR field specifies whether the received frame is dropped or send to the RX FIFO. If UART_RX_CTL.DROP_ON_FRAME_ERROR is '1', the received data frame is dropped. If UART_RX_CTL.DROP_ON_FRAME_ERROR is '0', the received data frame is send to the RX FIFO. Note that Firmware can only identify the erroneous data frame in the RX FIFO if it is fast enough to read the data frame before the hardware writes a next data frame into the RX FIFO; i.e. the RX FIFO does not have error flags to tag erroneous data frames."
      bit_offset: 8
      bit_size: 1
    - name: PARITY_ERROR
      description: "Parity error in received data frame. Set to '1', when event is detected. Write with '1' to clear bit. If UART_RX_CTL.DROP_ON_PARITY_ERROR is '1', the received frame is dropped. If UART_RX_CTL.DROP_ON_PARITY_ERROR is '0', the received frame is send to the RX FIFO. In SmartCard submode, negatively acknowledged data frames generate a parity error. Note that Firmware can only identify the erroneous data frame in the RX FIFO if it is fast enough to read the data frame before the hardware writes a next data frame into the RX FIFO."
      bit_offset: 9
      bit_size: 1
    - name: BAUD_DETECT
      description: "LIN baudrate detection is completed. The receiver software uses the UART_RX_STATUS.BR_COUNTER value to set the right IP clock (from the programmable clock IP) to guarantee successful receipt of the first LIN data frame (Protected Identifier Field) after the synchronization byte. Set to '1', when event is detected. Write with '1' to clear bit."
      bit_offset: 10
      bit_size: 1
    - name: BREAK_DETECT
      description: "Break detection is successful: the line is '0' for UART_RX_CTRL.BREAK_WIDTH + 1 bit period. Can occur at any time to address unanticipated break fields; i.e. 'break-in-data' is supported. This feature is supported for the UART standard and LIN submodes. For the UART standard submodes, ongoing receipt of data frames is NOT affected; i.e. Firmware is expected to take the proper action. For the LIN submode, possible ongoing receipt of a data frame is stopped and the (partially) received data frame is dropped and baud rate detection is started. Set to '1', when event is detected. Write with '1' to clear bit."
      bit_offset: 11
      bit_size: 1
fieldset/INTR_RX_MASK:
  description: Receiver interrupt mask
  fields:
    - name: TRIGGER
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: NOT_EMPTY
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 2
      bit_size: 1
    - name: FULL
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 3
      bit_size: 1
    - name: OVERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 7
      bit_size: 1
    - name: FRAME_ERROR
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 8
      bit_size: 1
    - name: PARITY_ERROR
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 9
      bit_size: 1
    - name: BAUD_DETECT
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 10
      bit_size: 1
    - name: BREAK_DETECT
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 11
      bit_size: 1
fieldset/INTR_RX_MASKED:
  description: Receiver interrupt masked request
  fields:
    - name: TRIGGER
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: NOT_EMPTY
      description: Logical and of corresponding request and mask bits.
      bit_offset: 2
      bit_size: 1
    - name: FULL
      description: Logical and of corresponding request and mask bits.
      bit_offset: 3
      bit_size: 1
    - name: OVERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: Logical and of corresponding request and mask bits.
      bit_offset: 7
      bit_size: 1
    - name: FRAME_ERROR
      description: Logical and of corresponding request and mask bits.
      bit_offset: 8
      bit_size: 1
    - name: PARITY_ERROR
      description: Logical and of corresponding request and mask bits.
      bit_offset: 9
      bit_size: 1
    - name: BAUD_DETECT
      description: Logical and of corresponding request and mask bits.
      bit_offset: 10
      bit_size: 1
    - name: BREAK_DETECT
      description: Logical and of corresponding request and mask bits.
      bit_offset: 11
      bit_size: 1
fieldset/INTR_RX_SET:
  description: Receiver interrupt set request
  fields:
    - name: TRIGGER
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 0
      bit_size: 1
    - name: NOT_EMPTY
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 2
      bit_size: 1
    - name: FULL
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 3
      bit_size: 1
    - name: OVERFLOW
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 7
      bit_size: 1
    - name: FRAME_ERROR
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 8
      bit_size: 1
    - name: PARITY_ERROR
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 9
      bit_size: 1
    - name: BAUD_DETECT
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 10
      bit_size: 1
    - name: BREAK_DETECT
      description: "Write with '1' to set corresponding bit in interrupt status register."
      bit_offset: 11
      bit_size: 1
fieldset/INTR_S:
  description: Slave interrupt request
  fields:
    - name: I2C_ARB_LOST
      description: "I2C slave lost arbitration: the value driven on the SDA line is not the same as the value observed on the SDA line (while the SCL line is '1'). This should not occur, it represents erroneous I2C bus behavior. In case of lost arbitration, the I2C slave state machine abort the ongoing transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: "I2C slave negative acknowledgement received. Set to '1', when the slave receives a NACK (typically after the slave transmitted TX data)."
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: "I2C slave acknowledgement received. Set to '1', when the slave receives a ACK (typically after the slave transmitted TX data)."
      bit_offset: 2
      bit_size: 1
    - name: I2C_WRITE_STOP
      description: "I2C STOP event for I2C write transfer intended for this slave (address matching is performed). Set to '1', when STOP or REPEATED START event is detected. The REPEATED START event is included in this interrupt cause such that the I2C transfers separated by a REPEATED START can be distinguished and potentially treated separately by the Firmware. Note that the second I2C transfer (after a REPEATED START) may be to a different slave address. In non EZ mode, the event is detected on any I2C write transfer intended for this slave. Note that a I2C write address intended for the slave (address is matching and a it is a write transfer) will result in a I2C_WRITE_STOP event independent of whether the I2C address is ACK'd or NACK'd. In EZ mode, the event is detected only on I2C write transfers that have EZ data written to the memory structure (an I2C write transfer that only communicates an I2C address and EZ address, will not result in this event being detected)."
      bit_offset: 3
      bit_size: 1
    - name: I2C_STOP
      description: "I2C STOP event for I2C (read or write) transfer intended for this slave (address matching is performed). Set to '1', when STOP or REPEATED START event is detected. The REPEATED START event is included in this interrupt cause such that the I2C transfers separated by a REPEATED START can be distinguished and potentially treated separately by the Firmware. Note that the second I2C transfer (after a REPEATED START) may be to a different slave address. The event is detected on any I2C transfer intended for this slave. Note that a I2C address intended for the slave (address is matching) will result in a I2C_STOP event independent of whether the I2C address is ACK'd or NACK'd."
      bit_offset: 4
      bit_size: 1
    - name: I2C_START
      description: "I2C slave START received. Set to '1', when START or REPEATED START event is detected. In the case of externally clocked address matching (CTRL.EC_AM_MODE is '1') AND clock stretching is performed (till the internally clocked logic takes over) (I2C_CTRL.S_NOT_READY_ADDR_NACK is '0'), this field is NOT set. The Firmware should use INTR_S_EC.WAKE_UP, INTR_S.I2C_ADDR_MATCH and INTR_S.I2C_GENERAL."
      bit_offset: 5
      bit_size: 1
    - name: I2C_ADDR_MATCH
      description: "I2C slave matching address received. If CTRL.ADDR_ACCEPT, the received address (including the R/W bit) is available in the RX FIFO. In the case of externally clocked address matching (CTRL.EC_AM_MODE is '1') and internally clocked operation (CTRL.EC_OP_MODE is '0'), this field is set when the event is detected."
      bit_offset: 6
      bit_size: 1
    - name: I2C_GENERAL
      description: "I2C slave general call address received. If CTRL.ADDR_ACCEPT, the received address 0x00 (including the R/W bit) is available in the RX FIFO. In the case of externally clocked address matching (CTRL.EC_AM_MODE is '1') and internally clocked operation (CTRL.EC_OP_MODE is '0'), this field is set when the event is detected."
      bit_offset: 7
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: "I2C slave bus error (unexpected detection of START or STOP condition). This should not occur, it represents erroneous I2C bus behavior. In case of a bus error, the I2C slave state machine abort the ongoing transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error."
      bit_offset: 8
      bit_size: 1
    - name: SPI_EZ_WRITE_STOP
      description: SPI slave deselected after a write EZ SPI transfer occurred.
      bit_offset: 9
      bit_size: 1
    - name: SPI_EZ_STOP
      description: SPI slave deselected after any EZ SPI transfer occurred.
      bit_offset: 10
      bit_size: 1
    - name: SPI_BUS_ERROR
      description: SPI slave deselected at an unexpected time in the SPI transfer. The Firmware may decide to clear the TX and RX FIFOs in case of this error.
      bit_offset: 11
      bit_size: 1
fieldset/INTR_SPI_EC:
  description: Externally clocked SPI interrupt request
  fields:
    - name: WAKE_UP
      description: "Wake up request. Active on incoming slave request when externally clocked selection is '1'. Only used when EC_AM is '1'."
      bit_offset: 0
      bit_size: 1
    - name: EZ_STOP
      description: "STOP detection. Activated on the end of a every transfer (SPI deselection). Only available in EZ and CMD_RESP mode and when EC_OP is '1'."
      bit_offset: 1
      bit_size: 1
    - name: EZ_WRITE_STOP
      description: "STOP detection after a write transfer occurred. Activated on the end of a write transfer (SPI deselection). This event is an indication that a buffer memory location has been written to. For EZ mode: a transfer that only writes the base address does NOT activate this event. Only used in EZ and CMD_RESP modes and when EC_OP is '1'."
      bit_offset: 2
      bit_size: 1
    - name: EZ_READ_STOP
      description: "STOP detection after a read transfer occurred. Activated on the end of a read transfer (SPI deselection). This event is an indication that a buffer memory location has been read from. Only used in EZ and CMD_RESP modes and when EC_OP is '1'."
      bit_offset: 3
      bit_size: 1
fieldset/INTR_SPI_EC_MASK:
  description: Externally clocked SPI interrupt mask
  fields:
    - name: WAKE_UP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: EZ_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 1
      bit_size: 1
    - name: EZ_WRITE_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 2
      bit_size: 1
    - name: EZ_READ_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 3
      bit_size: 1
fieldset/INTR_SPI_EC_MASKED:
  description: Externally clocked SPI interrupt masked
  fields:
    - name: WAKE_UP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: EZ_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 1
      bit_size: 1
    - name: EZ_WRITE_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 2
      bit_size: 1
    - name: EZ_READ_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 3
      bit_size: 1
fieldset/INTR_S_MASK:
  description: Slave interrupt mask
  fields:
    - name: I2C_ARB_LOST
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 2
      bit_size: 1
    - name: I2C_WRITE_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 3
      bit_size: 1
    - name: I2C_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 4
      bit_size: 1
    - name: I2C_START
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 5
      bit_size: 1
    - name: I2C_ADDR_MATCH
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 6
      bit_size: 1
    - name: I2C_GENERAL
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 7
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 8
      bit_size: 1
    - name: SPI_EZ_WRITE_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 9
      bit_size: 1
    - name: SPI_EZ_STOP
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 10
      bit_size: 1
    - name: SPI_BUS_ERROR
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 11
      bit_size: 1
fieldset/INTR_S_MASKED:
  description: Slave interrupt masked request
  fields:
    - name: I2C_ARB_LOST
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: Logical and of corresponding request and mask bits.
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: Logical and of corresponding request and mask bits.
      bit_offset: 2
      bit_size: 1
    - name: I2C_WRITE_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 3
      bit_size: 1
    - name: I2C_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 4
      bit_size: 1
    - name: I2C_START
      description: Logical and of corresponding request and mask bits.
      bit_offset: 5
      bit_size: 1
    - name: I2C_ADDR_MATCH
      description: Logical and of corresponding request and mask bits.
      bit_offset: 6
      bit_size: 1
    - name: I2C_GENERAL
      description: Logical and of corresponding request and mask bits.
      bit_offset: 7
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: Logical and of corresponding request and mask bits.
      bit_offset: 8
      bit_size: 1
    - name: SPI_EZ_WRITE_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 9
      bit_size: 1
    - name: SPI_EZ_STOP
      description: Logical and of corresponding request and mask bits.
      bit_offset: 10
      bit_size: 1
    - name: SPI_BUS_ERROR
      description: Logical and of corresponding request and mask bits.
      bit_offset: 11
      bit_size: 1
fieldset/INTR_S_SET:
  description: Slave interrupt set request
  fields:
    - name: I2C_ARB_LOST
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 0
      bit_size: 1
    - name: I2C_NACK
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 1
      bit_size: 1
    - name: I2C_ACK
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 2
      bit_size: 1
    - name: I2C_WRITE_STOP
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 3
      bit_size: 1
    - name: I2C_STOP
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 4
      bit_size: 1
    - name: I2C_START
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 5
      bit_size: 1
    - name: I2C_ADDR_MATCH
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 6
      bit_size: 1
    - name: I2C_GENERAL
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 7
      bit_size: 1
    - name: I2C_BUS_ERROR
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 8
      bit_size: 1
    - name: SPI_EZ_WRITE_STOP
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 9
      bit_size: 1
    - name: SPI_EZ_STOP
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 10
      bit_size: 1
    - name: SPI_BUS_ERROR
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 11
      bit_size: 1
fieldset/INTR_TX:
  description: Transmitter interrupt request
  fields:
    - name: TRIGGER
      description: Less entries in the TX FIFO than the value specified by TX_FIFO_CTRL.TRIGGER_LEVEL. Only used in FIFO mode.
      bit_offset: 0
      bit_size: 1
    - name: NOT_FULL
      description: "TX FIFO is not full. Dependent on CTRL.BYTE_MODE: (FF_DATA_NR = EZ_DATA_NR/2) BYTE_MODE is '0': # entries != FF_DATA_NR/2. BYTE_MODE is '1': # entries != FF_DATA_NR. Only used in FIFO mode."
      bit_offset: 1
      bit_size: 1
    - name: EMPTY
      description: TX FIFO is empty; i.e. it has 0 entries. Only used in FIFO mode.
      bit_offset: 4
      bit_size: 1
    - name: OVERFLOW
      description: Attempt to write to a full TX FIFO. Only used in FIFO mode.
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: "Attempt to read from an empty TX FIFO. This happens when the IP is ready to transfer data and EMPTY is '1'. Only used in FIFO mode."
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: "AHB-Lite write transfer can not get access to the EZ memory (EZ data access), due to an externally clocked EZ access. This may happen when STATUS.EC_BUSY is '1'."
      bit_offset: 7
      bit_size: 1
    - name: UART_NACK
      description: "UART transmitter received a negative acknowledgement in SmartCard mode. Set to '1', when event is detected. Write with '1' to clear bit."
      bit_offset: 8
      bit_size: 1
    - name: UART_DONE
      description: "UART transmitter done event. This happens when the IP is done transferring all data in the TX FIFO, and the last stop field is transmitted (both TX FIFO and transmit shifter register are empty). Set to '1', when event is detected. Write with '1' to clear bit."
      bit_offset: 9
      bit_size: 1
    - name: UART_ARB_LOST
      description: "UART lost arbitration: the value driven on the TX line is not the same as the value observed on the RX line. This condition event is useful when transmitter and receiver share a TX/RX line. This is the case in LIN or SmartCard modes. Set to '1', when event is detected. Write with '1' to clear bit."
      bit_offset: 10
      bit_size: 1
fieldset/INTR_TX_MASK:
  description: Transmitter interrupt mask
  fields:
    - name: TRIGGER
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: NOT_FULL
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 1
      bit_size: 1
    - name: EMPTY
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 4
      bit_size: 1
    - name: OVERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 7
      bit_size: 1
    - name: UART_NACK
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 8
      bit_size: 1
    - name: UART_DONE
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 9
      bit_size: 1
    - name: UART_ARB_LOST
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 10
      bit_size: 1
fieldset/INTR_TX_MASKED:
  description: Transmitter interrupt masked request
  fields:
    - name: TRIGGER
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: NOT_FULL
      description: Logical and of corresponding request and mask bits.
      bit_offset: 1
      bit_size: 1
    - name: EMPTY
      description: Logical and of corresponding request and mask bits.
      bit_offset: 4
      bit_size: 1
    - name: OVERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: Logical and of corresponding request and mask bits.
      bit_offset: 7
      bit_size: 1
    - name: UART_NACK
      description: Logical and of corresponding request and mask bits.
      bit_offset: 8
      bit_size: 1
    - name: UART_DONE
      description: Logical and of corresponding request and mask bits.
      bit_offset: 9
      bit_size: 1
    - name: UART_ARB_LOST
      description: Logical and of corresponding request and mask bits.
      bit_offset: 10
      bit_size: 1
fieldset/INTR_TX_SET:
  description: Transmitter interrupt set request
  fields:
    - name: TRIGGER
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 0
      bit_size: 1
    - name: NOT_FULL
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 1
      bit_size: 1
    - name: EMPTY
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 4
      bit_size: 1
    - name: OVERFLOW
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 5
      bit_size: 1
    - name: UNDERFLOW
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 6
      bit_size: 1
    - name: BLOCKED
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 7
      bit_size: 1
    - name: UART_NACK
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 8
      bit_size: 1
    - name: UART_DONE
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 9
      bit_size: 1
    - name: UART_ARB_LOST
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 10
      bit_size: 1
fieldset/RX_CTRL:
  description: Receiver control
  fields:
    - name: DATA_WIDTH
      description: "Dataframe width. DATA_WIDTH + 1 is the expected amount of bits in received data frame. This number does not include start, parity and stop bits. For UART mode, the valid range is [3, 8]. For SPI, the valid range is [3, 15]. For I2C the only valid value is 7. In EZ mode (for both SPI and I2C), the only valid value is 7."
      bit_offset: 0
      bit_size: 4
    - name: MSB_FIRST
      description: "Least significant bit first ('0') or most significant bit first ('1'). For I2C, this field should be '1'."
      bit_offset: 8
      bit_size: 1
    - name: MEDIAN
      description: "Median filter. When '1', a digital 3 taps median filter is performed on input interface lines. This filter should reduce the susceptibility to errors. However, its requires higher oversampling values. For UART IrDA submode, this field should always be '1'."
      bit_offset: 9
      bit_size: 1
fieldset/RX_FIFO_CTRL:
  description: Receiver FIFO control
  fields:
    - name: TRIGGER_LEVEL
      description: "Trigger level. When the receiver FIFO has more entries than the number of this field, a receiver trigger event INTR_RX.TRIGGER is generated."
      bit_offset: 0
      bit_size: 8
    - name: CLEAR
      description: "When '1', the receiver FIFO and receiver shift register are cleared/invalidated. Invalidation will last for as long as this field is '1'. If a quick clear/invalidation is required, the field should be set to '1' and be followed by a set to '0'. If a clear/invalidation is required for an extended time period, the field should be set to '1' during the complete time period."
      bit_offset: 16
      bit_size: 1
    - name: FREEZE
      description: "When '1', hardware writes to the receiver FIFO have no effect. Freeze will not advance the RX FIFO write pointer."
      bit_offset: 17
      bit_size: 1
fieldset/RX_FIFO_RD:
  description: Receiver FIFO read
  fields:
    - name: DATA
      description: "Data read from the receiver FIFO. Reading a data frame will remove the data frame from the FIFO; i.e. behavior is similar to that of a POP operation. Note that when CTRL.BYTE_MODE is '1', only DATA[7:0] are used. This register has a side effect when read by software: a data frame is removed from the FIFO. This may be undesirable during debug; i.e. a read during debug should NOT have a side effect. To this end, the IP uses the AHB-Lite 'hmaster[0]' input signal. When this signal is '1' in the address cycle of a bus transfer, a read transfer will not have a side effect. As a result, a read from this register will not remove a data frame from the FIFO. As a result, a read from this register behaves as a read from the SCB_RX_FIFO_RD_SILENT register. A read from an empty RX FIFO sets INTR_RX.UNDERFLOW to '1'."
      bit_offset: 0
      bit_size: 16
fieldset/RX_FIFO_RD_SILENT:
  description: Receiver FIFO read silent
  fields:
    - name: DATA
      description: "Data read from the receiver FIFO. Reading a data frame will NOT remove the data frame from the FIFO; i.e. behavior is similar to that of a PEEK operation. Note that when CTRL.BYTE_MODE is '1', only DATA[7:0] are used. A read from an empty RX FIFO sets INTR_RX.UNDERFLOW to '1'."
      bit_offset: 0
      bit_size: 16
fieldset/RX_FIFO_STATUS:
  description: Receiver FIFO status
  fields:
    - name: USED
      description: Amount of entries in the receiver FIFO. The value of this field ranges from 0 to FF_DATA_NR (EZ_DATA_NR/2).
      bit_offset: 0
      bit_size: 9
    - name: SR_VALID
      description: "Indicates whether the RX shift registers holds a (partial) valid data frame ('1') or not ('0'). The shift register can be considered the bottom of the RX FIFO (the data frame is not included in the USED field of the RX FIFO). The shift register is a working register and holds the data frame that is currently being received (when the protocol state machine is receiving a data frame)."
      bit_offset: 15
      bit_size: 1
    - name: RD_PTR
      description: "FIFO read pointer: FIFO location from which a data frame is read."
      bit_offset: 16
      bit_size: 8
    - name: WR_PTR
      description: "FIFO write pointer: FIFO location at which a new data frame is written by the hardware."
      bit_offset: 24
      bit_size: 8
fieldset/RX_MATCH:
  description: Slave address and mask
  fields:
    - name: ADDR
      description: "Slave device address. In UART multi-processor mode, all 8 bits are used. In I2C slave mode, only bits 7 down to 1 are used. This reflects the organization of the first transmitted byte in a I2C transfer: the first 7 bits represent the address of the addressed slave, and the last 1 bit is a read/write indicator ('0': write, '1': read)."
      bit_offset: 0
      bit_size: 8
    - name: MASK
      description: "Slave device address mask. This field is a mask that specifies which of the ADDR field bits in the ADDR field take part in the matching of the slave address: MATCH = ((ADDR & MASK) == ('slave address' & MASK))."
      bit_offset: 16
      bit_size: 8
fieldset/SPI_CTRL:
  description: SPI control
  fields:
    - name: SSEL_CONTINUOUS
      description: "Continuous SPI data transfers enabled ('1') or not ('0'). This field is used in master mode. In slave mode, both continuous and non-continuous SPI data transfers are supported independent of this field. When continuous transfers are enabled individual data frame transfers are not necessarily separated by slave deselection (as indicated by the level or pulse on the SELECT line): if the TX FIFO has multiple data frames, data frames are send out without slave deselection. When continuous transfers are not enabled individual data frame transfers are always separated by slave deselection: independent of the availability of TX FIFO data frames."
      bit_offset: 0
      bit_size: 1
    - name: SELECT_PRECEDE
      description: "Only used in SPI Texas Instruments' submode. When '1', the data frame start indication is a pulse on the SELECT line that precedes the transfer of the first data frame bit. When '0', the data frame start indication is a pulse on the SELECT line that coincides with the transfer of the first data frame bit."
      bit_offset: 1
      bit_size: 1
    - name: CPHA
      description: "Indicates the clock phase. This field, together with the CPOL field, indicates when MOSI data is driven and MISO data is captured: - Motorola mode 0. CPOL is '0', CPHA is '0': MOSI is driven on a falling edge of SCLK. MISO is captured on a rising edge of SCLK. - Motorola mode 1. CPOL is '0', CPHA is '1': MOSI is driven on a rising edge of SCLK. MISO is captured on a falling edge of SCLK. - Motorola mode 2. CPOL is '1', CPHA is '0': MOSI is driven on a rising edge of SCLK. MISO is captured on a falling edge of SCLK. - Motorola mode 3. CPOL is '1', CPHA is '1': MOSI is driven on a falling edge of SCLK. MISO is captured on a rising edge of SCLK. In SPI Motorola submode, all four CPOL/CPHA modes are valid. in SPI NS submode, only CPOL=0 CPHA=0 mode is valid. in SPI TI submode, only CPOL=0 CPHA=1 mode is valid."
      bit_offset: 2
      bit_size: 1
    - name: CPOL
      description: "Indicates the clock polarity. This field, together with the CPHA field, indicates when MOSI data is driven and MISO data is captured: - CPOL is '0': SCLK is '0' when not transmitting data. - CPOL is '1': SCLK is '1' when not transmitting data."
      bit_offset: 3
      bit_size: 1
    - name: LATE_MISO_SAMPLE
      description: "Changes the SCLK edge on which MISO is captured. Only used in master mode. When '0', the default applies (for Motorola as determined by CPOL and CPHA, for Texas Instruments on the falling edge of SCLK and for National Semiconductors on the rising edge of SCLK). When '1', the alternate clock edge is used (which comes half a SPI SCLK period later). Late sampling addresses the round trip delay associated with transmitting SCLK from the master to the slave and transmitting MISO from the slave to the master."
      bit_offset: 4
      bit_size: 1
    - name: SCLK_CONTINUOUS
      description: "Only applicable in master mode. '0': SCLK is generated, when the SPI master is enabled and data is transmitted. '1': SCLK is generated, when the SPI master is enabled. This mode is useful for slave devices that use SCLK for functional operation other than just SPI functionality."
      bit_offset: 5
      bit_size: 1
    - name: SSEL_POLARITY0
      description: "Slave select polarity. SSEL_POLARITY0 applies to the outgoing SPI slave select signal 0 (master mode) and to the incoming SPI slave select signal (slave mode). For Motorola and National Semiconductors submodes: '0': slave select is low/'0' active. '1': slave select is high/'1' active. For Texas Instruments submode: '0': high/'1' active precede/coincide pulse. '1': low/'0' active precede/coincide pulse."
      bit_offset: 8
      bit_size: 1
    - name: SSEL_POLARITY1
      description: Slave select polarity.
      bit_offset: 9
      bit_size: 1
    - name: SSEL_POLARITY2
      description: Slave select polarity.
      bit_offset: 10
      bit_size: 1
    - name: SSEL_POLARITY3
      description: Slave select polarity.
      bit_offset: 11
      bit_size: 1
    - name: LOOPBACK
      description: "Local loopback control (does NOT affect the information on the pins). Only used in master mode. Not used in National Semiconductors submode. '0': the SPI master MISO line 'spi_miso_in' is connected to the SPI MISO pin. '1': the SPI master MISO line 'spi_miso_in' is connected to the SPI master MOSI line 'spi_mosi_out'. In other words, in loopback mode the SPI master receives on MISO what it transmits on MOSI."
      bit_offset: 16
      bit_size: 1
    - name: MODE
      description: N/A
      bit_offset: 24
      bit_size: 2
      enum: SPI_CTRL_MODE
    - name: SSEL
      description: "Selects one of the four incoming/outgoing SPI slave select signals: - 0: Slave 0, SSEL[0]. - 1: Slave 1, SSEL[1]. - 2: Slave 2, SSEL[2]. - 3: Slave 3, SSEL[3]. The IP should be disabled when changes are made to this field."
      bit_offset: 26
      bit_size: 2
    - name: MASTER_MODE
      description: "Master ('1') or slave ('0') mode. In master mode, transmission will commence on availability of data frames in the TX FIFO. In slave mode, when selected and there is no data frame in the TX FIFO, the slave will transmit all '1's. In both master and slave modes, received data frames will be lost if the RX FIFO is full."
      bit_offset: 31
      bit_size: 1
fieldset/SPI_STATUS:
  description: SPI status
  fields:
    - name: BUS_BUSY
      description: "SPI bus is busy. The bus is considered busy ('1') during an ongoing transaction. For Motorola and National submodes, the busy bit is '1', when the slave selection is activated. For TI submode, the busy bit is '1' from the time the preceding/coinciding slave select is activated for the first transmitted data frame, till the last MOSI/MISO bit of the last data frame is transmitted."
      bit_offset: 0
      bit_size: 1
    - name: SPI_EC_BUSY
      description: Indicates whether the externally clocked logic is potentially accessing the EZ memory and/or updating BASE_ADDR or CURR_ADDR (this is only possible in EZ mode). This bit can be used by SW to determine whether BASE_ADDR and CURR_ADDR are reliable.
      bit_offset: 1
      bit_size: 1
    - name: CURR_EZ_ADDR
      description: "SPI current EZ address. Current address pointer. This field is only reliable in internally clocked mode. In externally clocked mode the field may be unreliable (during an ongoing transfer when SPI_EC_BUSY is '1'), as clock domain synchronization is not performed in the design."
      bit_offset: 8
      bit_size: 8
    - name: BASE_EZ_ADDR
      description: "SPI base EZ address. Address as provided by a SPI write transfer. This field is only reliable in internally clocked mode. In externally clocked mode the field may be unreliable, as clock domain synchronization is not performed in the design."
      bit_offset: 16
      bit_size: 8
fieldset/STATUS:
  description: Generic status
  fields:
    - name: EC_BUSY
      description: Indicates whether the externally clocked logic is potentially accessing the EZ memory (this is only possible in EZ mode). This bit can be used by SW to determine whether it is safe to issue a SW access to the EZ memory (without bus wait states (a blocked SW access) or bus errors being generated). Note that the INTR_TX.BLOCKED and INTR_RX.BLOCKED interrupt causes are used to indicate whether a SW access was actually blocked by externally clocked logic.
      bit_offset: 0
      bit_size: 1
fieldset/TX_CTRL:
  description: Transmitter control
  fields:
    - name: DATA_WIDTH
      description: "Dataframe width. DATA_WIDTH + 1 is the amount of bits in a transmitted data frame. This number does not include start, parity and stop bits. For UART mode, the valid range is [3, 8]. For SPI, the valid range is [3, 15]. For I2C the only valid value is 7."
      bit_offset: 0
      bit_size: 4
    - name: MSB_FIRST
      description: "Least significant bit first ('0') or most significant bit first ('1'). For I2C, this field should be '1'."
      bit_offset: 8
      bit_size: 1
    - name: OPEN_DRAIN
      description: "Each IO cell 'xxx' has two associated IP output signals 'xxx_out_en' and 'xxx_out'. '0': Normal operation mode. Typically, this operation mode is used for IO cells that are connected to (board) wires/lines that are driven by a single IO cell. In this operation mode, for an IO cell 'xxx' that is used as an output, the 'xxx_out_en' output enable signal is typically constant '1' the 'xxx_out' output is the outputted value. In other words, in normal operation mode, the 'xxx_out' output is used to control the IO cell output value: 'xxx_out' is '0' to drive an IO cell output value of '0' and 'xxx_out' is '1' to drive an IO cell output value of '1'. '1': Open drain operation mode. Typically this operation mode is used for IO cells that are connected to (board) wires/lines that are driven by multiple IO cells (possibly on multiple chips). In this operation mode, for and IO cell 'xxx' that is used as an output, the 'xxx_out_en' output controls the outputted value. Typically, open drain operation mode drives low/'0' and the 'xxx_out' output is constant '1'. In other words, in open drain operation mode, the 'xxx_out_en' output is used to control the IO cell output value: in drive low/'0' mode: 'xxx_out_en' is '1' (drive enabled) to drive an IO cell output value of '0' and 'xxx_out_en' is '1' (drive disabled) to not drive an IO cell output value (another IO cell can drive the wire/line or a pull up results in a wire/line value '1'). The open drain mode is supported for: - I2C mode, 'i2c_scl' and 'i2c_sda' IO cells. - UART mode, 'uart_tx' IO cell (SPI slave). - SPI mode, 'spi_miso' IO cell."
      bit_offset: 16
      bit_size: 1
fieldset/TX_FIFO_CTRL:
  description: Transmitter FIFO control
  fields:
    - name: TRIGGER_LEVEL
      description: "Trigger level. When the transmitter FIFO has less entries than the number of this field, a transmitter trigger event INTR_TX.TRIGGER is generated."
      bit_offset: 0
      bit_size: 8
    - name: CLEAR
      description: "When '1', the transmitter FIFO and transmitter shift register are cleared/invalidated. Invalidation will last for as long as this field is '1'. If a quick clear/invalidation is required, the field should be set to '1' and be followed by a set to '0'. If a clear/invalidation is required for an extended time period, the field should be set to '1' during the complete time period."
      bit_offset: 16
      bit_size: 1
    - name: FREEZE
      description: "When '1', hardware reads from the transmitter FIFO do not remove FIFO entries. Freeze will not advance the TX FIFO read pointer."
      bit_offset: 17
      bit_size: 1
fieldset/TX_FIFO_STATUS:
  description: Transmitter FIFO status
  fields:
    - name: USED
      description: Amount of entries in the transmitter FIFO. The value of this field ranges from 0 to FF_DATA_NR (EZ_DATA_NR/2).
      bit_offset: 0
      bit_size: 9
    - name: SR_VALID
      description: "Indicates whether the TX shift registers holds a valid data frame ('1') or not ('0'). The shift register can be considered the top of the TX FIFO (the data frame is not included in the USED field of the TX FIFO). The shift register is a working register and holds the data frame that is currently transmitted (when the protocol state machine is transmitting a data frame) or the data frame that is transmitted next (when the protocol state machine is not transmitting a data frame)."
      bit_offset: 15
      bit_size: 1
    - name: RD_PTR
      description: "FIFO read pointer: FIFO location from which a data frame is read by the hardware."
      bit_offset: 16
      bit_size: 8
    - name: WR_PTR
      description: "FIFO write pointer: FIFO location at which a new data frame is written."
      bit_offset: 24
      bit_size: 8
fieldset/TX_FIFO_WR:
  description: Transmitter FIFO write
  fields:
    - name: DATA
      description: "Data frame written into the transmitter FIFO. Behavior is similar to that of a PUSH operation. Note that when CTRL.BYTE_MODE is '1', only DATA[7:0] are used. A write to a full TX FIFO sets INTR_TX.OVERFLOW to '1'."
      bit_offset: 0
      bit_size: 16
fieldset/UART_CTRL:
  description: UART control
  fields:
    - name: LOOPBACK
      description: "Local loopback control (does NOT affect the information on the pins). When '0', the transmitter TX line 'uart_tx_out' is connected to the TX pin and the receiver RX line 'uart_rx_in' is connected to the RX pin. When '1', the transmitter TX line 'uart_tx_out' is connected to the receiver RX line 'uart_rx_in'. A similar connections scheme is followed for 'uart_rts_out' and 'uart_cts_in'. This allows a SCB UART transmitter to communicate with its receiver counterpart."
      bit_offset: 16
      bit_size: 1
    - name: MODE
      description: N/A
      bit_offset: 24
      bit_size: 2
      enum: UART_CTRL_MODE
fieldset/UART_FLOW_CTRL:
  description: UART flow control
  fields:
    - name: TRIGGER_LEVEL
      description: "Trigger level. When the receiver FIFO has less entries than the amount of this field, a Ready To Send (RTS) output signal 'uart_rts_out' is activated. By setting this field to '0', flow control is effectively SW disabled (may be useful for debug purposes)."
      bit_offset: 0
      bit_size: 8
    - name: RTS_POLARITY
      description: "Polarity of the RTS output signal 'uart_rts_out': '0': RTS is low/'0' active; 'uart_rts_out' is '0' when active and 'uart_rts_out' is '1' when inactive. '1': RTS is high/'1' active; 'uart_rts_out' is '1' when active and 'uart_rts_out' is '0' when inactive. During IP reset (Hibernate system power mode), 'uart_rts_out' is '1'. This represents an inactive state assuming a low/'0' active polarity."
      bit_offset: 16
      bit_size: 1
    - name: CTS_POLARITY
      description: "Polarity of the CTS input signal 'uart_cts_in': '0': CTS is low/'0' active; 'uart_cts_in' is '0' when active and 'uart_cts_in' is '1' when inactive. '1': CTS is high/'1' active; 'uart_cts_in' is '1' when active and 'uart_cts_in' is '0' when inactive."
      bit_offset: 24
      bit_size: 1
    - name: CTS_ENABLED
      description: "Enable use of CTS input signal 'uart_cts_in' by the UART transmitter: '0': Disabled. The UART transmitter ignores 'uart_cts_in', and transmits when a data frame is available for transmission in the TX FIFO or the TX shift register. '1': Enabled. The UART transmitter uses 'uart_cts_in' to qualify the transmission of data. It transmits when 'uart_cts_in' is active and a data frame is available for transmission in the TX FIFO or the TX shift register. If UART_CTRL.LOOPBACK is '1', 'uart_cts_in' is connected to 'uart_rts_out' in the IP (both signals are subjected to signal polarity changes as indicated by RTS_POLARITY and CTS_POLARITY)."
      bit_offset: 25
      bit_size: 1
fieldset/UART_RX_CTRL:
  description: UART receiver control
  fields:
    - name: STOP_BITS
      description: "Stop bits. STOP_BITS + 1 is the duration of the stop period in terms of halve bit periods. Valid range is [1, 7]; i.e. a stop period should last at least one bit period. Note that in case of a stop bits error, the successive data frames may get lost as the receiver needs to resynchronize its start bit detection. The amount of lost data frames depends on both the amount of stop bits, the idle ('1') time between data frames and the data frame value."
      bit_offset: 0
      bit_size: 3
    - name: PARITY
      description: "Parity bit. When '0', the receiver expects an even parity. When '1', the receiver expects an odd parity. Only applicable in standard UART and SmartCard submodes."
      bit_offset: 4
      bit_size: 1
    - name: PARITY_ENABLED
      description: "Parity checking enabled ('1') or not ('0'). Only applicable in standard UART submode. In SmartCard submode, parity checking is always enabled through hardware. In IrDA submode, parity checking is always disabled through hardware."
      bit_offset: 5
      bit_size: 1
    - name: POLARITY
      description: "Inverts incoming RX line signal 'uart_rx_in'. Inversion is after local loopback. This functionality is intended for IrDA receiver functionality."
      bit_offset: 6
      bit_size: 1
    - name: DROP_ON_PARITY_ERROR
      description: "Behavior when a parity check fails. When '0', received data is send to the RX FIFO. When '1', received data is dropped and lost. Only applicable in standard UART and SmartCard submodes (negatively acknowledged SmartCard data frames may be dropped with this field)."
      bit_offset: 8
      bit_size: 1
    - name: DROP_ON_FRAME_ERROR
      description: "Behavior when an error is detected in a start or stop period. When '0', received data is send to the RX FIFO. When '1', received data is dropped and lost."
      bit_offset: 9
      bit_size: 1
    - name: MP_MODE
      description: "Multi-processor mode. When '1', multi-processor mode is enabled. In this mode, RX_CTRL.DATA_WIDTH should indicate a 9-bit data frame. In multi-processor mode, the 9th received bit of a data frame separates addresses (bit is '1') from data (bit is '0'). A received address is matched with RX_MATCH.DATA and RX_MATCH.MASK. In the case of a match, subsequent received data are sent to the RX FIFO. In the case of NO match, subsequent received data are dropped."
      bit_offset: 10
      bit_size: 1
    - name: LIN_MODE
      description: "Only applicable in standard UART submode. When '1', the receiver performs break detection and baud rate detection on the incoming data. First, break detection counts the amount of bit periods that have a line value of '0'. BREAK_WIDTH specifies the minimum required amount of bit periods. Successful break detection sets the INTR_RX.BREAK_DETECT interrupt cause to '1'. Second, baud rate detection counts the amount of peripheral clock periods that are use to receive the synchronization byte (0x55; least significant bit first). The count is available through UART_RX_STATUS.BR_COUNTER. Successful baud rate detection sets the INTR_RX.BAUD_DETECT interrupt cause to '1' (BR_COUNTER is reliable). This functionality is used to synchronize/refine the receiver clock to the transmitter clock. The receiver software can use the BR_COUNTER value to set the right IP clock (from the programmable clock IP) to guarantee successful receipt of the first LIN data frame (Protected Identifier Field) after the synchronization byte."
      bit_offset: 12
      bit_size: 1
    - name: SKIP_START
      description: "Only applicable in standard UART submode. When '1', the receiver skips start bit detection for the first received data frame. Instead, it synchronizes on the first received data frame bit, which should be a '1'. This functionality is intended for wake up from DeepSleep when receiving a data frame. The transition from idle ('1') to START ('0') on the RX line is used to wake up the CPU. The transition detection (and the associated wake up functionality) is performed by the GPIO2 IP. The woken up CPU will enable the SCB's UART receiver functionality. Once enabled, it is assumed that the START bit is ongoing (the CPU wakeup and SCB enable time should be less than the START bit period). The SCB will synchronize to a '0' to '1' transition, which indicates the first data frame bit is received (first data frame bit should be '1'). After synchronization to the first data frame bit, the SCB will resume normal UART functionality: subsequent data frames will be synchronized on the receipt of a START bit."
      bit_offset: 13
      bit_size: 1
    - name: BREAK_WIDTH
      description: "Break width. BREAK_WIDTH + 1 is the minimum width in bit periods of a break. During a break the transmitted/received line value is '0'. This feature is useful for standard UART submode and LIN submode ('break field' detection). Once, the break is detected, the INTR_RX.BREAK_DETECT bit is set to '1'. Note that break detection precedes baud rate detection, which is used to synchronize/refine the receiver clock to the transmitter clock. As a result, break detection operates with an unsynchronized/unrefined receiver clock. Therefore, the receiver's definition of a bit period is imprecise and the setting of this field should take this imprecision into account. The LIN standard also accounts for this imprecision: a LIN start bit followed by 8 data bits allows for up to 9 consecutive '0' bit periods during regular transmission, whereas the LIN break detection should be at least 13 consecutive '0' bit periods. This provides for a margin of 4 bit periods. Therefore, the default value of this field is set to 10, representing a minimal break field with of 10+1 = 11 bit periods; a value in between the 9 consecutive bit periods of a regular transmission and the 13 consecutive bit periods of a break field. This provides for slight imprecisions of the receiver clock wrt. the transmitter clock. There should not be a need to program this field to any value other than its default value."
      bit_offset: 16
      bit_size: 4
fieldset/UART_RX_STATUS:
  description: UART receiver status
  fields:
    - name: BR_COUNTER
      description: "Amount of peripheral clock periods that constitute the transmission of a 0x55 data frame (sent least significant bit first) as determined by the receiver. BR_COUNTER / 8 is the amount of peripheral clock periods that constitute a bit period. This field has valid data when INTR_RX.BAUD_DETECT is set to '1'."
      bit_offset: 0
      bit_size: 12
fieldset/UART_TX_CTRL:
  description: UART transmitter control
  fields:
    - name: STOP_BITS
      description: "Stop bits. STOP_BITS + 1 is the duration of the stop period in terms of halve bit periods. Valid range is [1, 7]; i.e. a stop period should last at least one bit period."
      bit_offset: 0
      bit_size: 3
    - name: PARITY
      description: "Parity bit. When '0', the transmitter generates an even parity. When '1', the transmitter generates an odd parity. Only applicable in standard UART and SmartCard submodes."
      bit_offset: 4
      bit_size: 1
    - name: PARITY_ENABLED
      description: "Parity generation enabled ('1') or not ('0'). Only applicable in standard UART submodes. In SmartCard submode, parity generation is always enabled through hardware. In IrDA submode, parity generation is always disabled through hardware"
      bit_offset: 5
      bit_size: 1
    - name: RETRY_ON_NACK
      description: "When '1', a data frame is retransmitted when a negative acknowledgement is received. Only applicable to the SmartCard submode."
      bit_offset: 8
      bit_size: 1
enum/CTRL_MODE:
  bit_size: 2
  variants:
    - name: I2C
      description: Inter-Integrated Circuits (I2C) mode.
      value: 0
    - name: SPI
      description: Serial Peripheral Interface (SPI) mode.
      value: 1
    - name: UART
      description: Universal Asynchronous Receiver/Transmitter (UART) mode.
      value: 2
enum/SPI_CTRL_MODE:
  bit_size: 2
  variants:
    - name: SPI_MOTOROLA
      description: "SPI Motorola submode. In master mode, when not transmitting data (SELECT is inactive), SCLK is stable at CPOL. In slave mode, when not selected, SCLK is ignored; i.e. it can be either stable or clocking. In master mode, when there is no data to transmit (TX FIFO is empty), SELECT is inactive."
      value: 0
    - name: SPI_TI
      description: "SPI Texas Instruments submode. In master mode, when not transmitting data, SCLK is stable at '0'. In slave mode, when not selected, SCLK is ignored; i.e. it can be either stable or clocking. In master mode, when there is no data to transmit (TX FIFO is empty), SELECT is inactive; i.e. no pulse is generated."
      value: 1
    - name: SPI_NS
      description: "SPI National Semiconductors submode. In master mode, when not transmitting data, SCLK is stable at '0'. In slave mode, when not selected, SCLK is ignored; i.e. it can be either stable or clocking. In master mode, when there is no data to transmit (TX FIFO is empty), SELECT is inactive."
      value: 2
enum/UART_CTRL_MODE:
  bit_size: 2
  variants:
    - name: UART_STD
      description: Standard UART submode.
      value: 0
    - name: UART_SMARTCARD
      description: SmartCard (ISO7816) submode. Support for negative acknowledgement (NACK) on the receiver side and retransmission on the transmitter side.
      value: 1
    - name: UART_IRDA
      description: Infrared Data Association (IrDA) submode. Return to Zero modulation scheme.
      value: 2
