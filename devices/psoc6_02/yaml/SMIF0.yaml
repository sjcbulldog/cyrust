---
block/DEVICE:
  description: Device (only used in XIP mode)
  items:
    - name: CTL
      description: Control
      byte_offset: 0
      fieldset: DEVICE_CTL
    - name: ADDR
      description: Device region base address
      byte_offset: 8
      fieldset: ADDR
    - name: MASK
      description: Device region mask
      byte_offset: 12
      fieldset: MASK
    - name: ADDR_CTL
      description: Address control
      byte_offset: 32
      fieldset: ADDR_CTL
    - name: RD_CMD_CTL
      description: Read command control
      byte_offset: 64
      fieldset: RD_CMD_CTL
    - name: RD_ADDR_CTL
      description: Read address control
      byte_offset: 68
      fieldset: RD_ADDR_CTL
    - name: RD_MODE_CTL
      description: Read mode control
      byte_offset: 72
      fieldset: RD_MODE_CTL
    - name: RD_DUMMY_CTL
      description: Read dummy control
      byte_offset: 76
      fieldset: RD_DUMMY_CTL
    - name: RD_DATA_CTL
      description: Read data control
      byte_offset: 80
      fieldset: RD_DATA_CTL
    - name: WR_CMD_CTL
      description: Write command control
      byte_offset: 96
      fieldset: WR_CMD_CTL
    - name: WR_ADDR_CTL
      description: Write address control
      byte_offset: 100
      fieldset: WR_ADDR_CTL
    - name: WR_MODE_CTL
      description: Write mode control
      byte_offset: 104
      fieldset: WR_MODE_CTL
    - name: WR_DUMMY_CTL
      description: Write dummy control
      byte_offset: 108
      fieldset: WR_DUMMY_CTL
    - name: WR_DATA_CTL
      description: Write data control
      byte_offset: 112
      fieldset: WR_DATA_CTL
block/SMIF0:
  description: Serial Memory Interface
  items:
    - name: CTL
      description: Control
      byte_offset: 0
      fieldset: SMIF0_CTL
    - name: STATUS
      description: Status
      byte_offset: 4
      access: Read
      fieldset: STATUS
    - name: TX_CMD_FIFO_STATUS
      description: Transmitter command FIFO status
      byte_offset: 68
      access: Read
      fieldset: TX_CMD_FIFO_STATUS
    - name: TX_CMD_FIFO_WR
      description: Transmitter command FIFO write
      byte_offset: 80
      access: Write
      fieldset: TX_CMD_FIFO_WR
    - name: TX_DATA_FIFO_CTL
      description: Transmitter data FIFO control
      byte_offset: 128
      fieldset: TX_DATA_FIFO_CTL
    - name: TX_DATA_FIFO_STATUS
      description: Transmitter data FIFO status
      byte_offset: 132
      access: Read
      fieldset: TX_DATA_FIFO_STATUS
    - name: TX_DATA_FIFO_WR1
      description: Transmitter data FIFO write
      byte_offset: 144
      access: Write
      fieldset: TX_DATA_FIFO_WR1
    - name: TX_DATA_FIFO_WR2
      description: Transmitter data FIFO write
      byte_offset: 148
      access: Write
      fieldset: TX_DATA_FIFO_WR2
    - name: TX_DATA_FIFO_WR4
      description: Transmitter data FIFO write
      byte_offset: 152
      access: Write
      fieldset: TX_DATA_FIFO_WR4
    - name: RX_DATA_FIFO_CTL
      description: Receiver data FIFO control
      byte_offset: 192
      fieldset: RX_DATA_FIFO_CTL
    - name: RX_DATA_FIFO_STATUS
      description: Receiver data FIFO status
      byte_offset: 196
      access: Read
      fieldset: RX_DATA_FIFO_STATUS
    - name: RX_DATA_FIFO_RD1
      description: Receiver data FIFO read
      byte_offset: 208
      access: Read
      fieldset: RX_DATA_FIFO_RD1
    - name: RX_DATA_FIFO_RD2
      description: Receiver data FIFO read
      byte_offset: 212
      access: Read
      fieldset: RX_DATA_FIFO_RD2
    - name: RX_DATA_FIFO_RD4
      description: Receiver data FIFO read
      byte_offset: 216
      access: Read
      fieldset: RX_DATA_FIFO_RD4
    - name: RX_DATA_FIFO_RD1_SILENT
      description: Receiver data FIFO silent read
      byte_offset: 224
      access: Read
      fieldset: RX_DATA_FIFO_RD1_SILENT
    - name: SLOW_CA_CTL
      description: Slow cache control
      byte_offset: 256
      fieldset: SLOW_CA_CTL
    - name: SLOW_CA_CMD
      description: Slow cache command
      byte_offset: 264
      fieldset: SLOW_CA_CMD
    - name: FAST_CA_CTL
      description: Fast cache control
      byte_offset: 384
      fieldset: FAST_CA_CTL
    - name: FAST_CA_CMD
      description: Fast cache command
      byte_offset: 392
      fieldset: FAST_CA_CMD
    - name: CRYPTO_CMD
      description: Cryptography Command
      byte_offset: 512
      fieldset: CRYPTO_CMD
    - name: CRYPTO_INPUT0
      description: Cryptography input 0
      byte_offset: 544
      fieldset: CRYPTO_INPUT0
    - name: CRYPTO_INPUT1
      description: Cryptography input 1
      byte_offset: 548
      fieldset: CRYPTO_INPUT1
    - name: CRYPTO_INPUT2
      description: Cryptography input 2
      byte_offset: 552
      fieldset: CRYPTO_INPUT2
    - name: CRYPTO_INPUT3
      description: Cryptography input 3
      byte_offset: 556
      fieldset: CRYPTO_INPUT3
    - name: CRYPTO_KEY0
      description: Cryptography key 0
      byte_offset: 576
      access: Write
      fieldset: CRYPTO_KEY0
    - name: CRYPTO_KEY1
      description: Cryptography key 1
      byte_offset: 580
      access: Write
      fieldset: CRYPTO_KEY1
    - name: CRYPTO_KEY2
      description: Cryptography key 2
      byte_offset: 584
      access: Write
      fieldset: CRYPTO_KEY2
    - name: CRYPTO_KEY3
      description: Cryptography key 3
      byte_offset: 588
      access: Write
      fieldset: CRYPTO_KEY3
    - name: CRYPTO_OUTPUT0
      description: Cryptography output 0
      byte_offset: 608
      fieldset: CRYPTO_OUTPUT0
    - name: CRYPTO_OUTPUT1
      description: Cryptography output 1
      byte_offset: 612
      fieldset: CRYPTO_OUTPUT1
    - name: CRYPTO_OUTPUT2
      description: Cryptography output 2
      byte_offset: 616
      fieldset: CRYPTO_OUTPUT2
    - name: CRYPTO_OUTPUT3
      description: Cryptography output 3
      byte_offset: 620
      fieldset: CRYPTO_OUTPUT3
    - name: INTR
      description: Interrupt register
      byte_offset: 1984
      fieldset: INTR
    - name: INTR_SET
      description: Interrupt set register
      byte_offset: 1988
      fieldset: INTR_SET
    - name: INTR_MASK
      description: Interrupt mask register
      byte_offset: 1992
      fieldset: INTR_MASK
    - name: INTR_MASKED
      description: Interrupt masked register
      byte_offset: 1996
      access: Read
      fieldset: INTR_MASKED
    - name: DEVICE
      description: Device (only used in XIP mode)
      array:
        len: 4
        stride: 128
      byte_offset: 2048
      block: DEVICE
fieldset/ADDR:
  description: Device region base address
  fields:
    - name: ADDR
      description: "Specifies the base address of the device region. If the device region is 2^m Bytes, ADDR MUST be a multiple of 2^m. In dual quad SPI data transfer, the two devices should have the same ADDR and MASK register settings. The device control information (ADDR_CTL, RD_CMD_CTL, etc.) are provided by the MMIO control registers of the device with the lowest index. The most significant bit fields are constants and set based on the SMIF_XIP_ADDR parameter. The most significant bits are identified on the SMIF_XIP_MASK parameter. E.g., if SMIF_XIP_MASK is 0xff00:0000 (16 MB XIP memory region), ADDR[31:24] = SMIF_XIP_ADDR[31:24]."
      bit_offset: 8
      bit_size: 24
fieldset/ADDR_CTL:
  description: Address control
  fields:
    - name: SIZE2
      description: "Specifies the size of the XIP device address in Bytes: '0': 1 Byte address. '1': 2 Byte address. '2': 3 Byte address. '3': 4 Byte address. The lower significant address Bytes of the transfer request are used as XIP address to the external device. Note that for dual quad SPI data transfer, the transfer request address is divided by 2. Therefore, the transfer request address needs to be a multiple of 2. If the trasnfer requestaddress is NOT a multiple of 2, the XIP_ALIGNMENT_ERROR interrupt cause is activated."
      bit_offset: 0
      bit_size: 2
    - name: DIV2
      description: "Specifies if the AHB-Lite bus transfer address is divided by 2 or not: '0': No divide by 2. '1': Divide by 2. This functionality is used for read and write operation in XIP, dual quad SPI mode; i.e. this DIV2 must be set to '1' in dual quad SPI mode. If the transfer request address is NOT a multiple of 2 or the requested number of Bytes is not a multiple of 2, the XIP_ALIGNMENT_ERROR interrupt cause is activated."
      bit_offset: 8
      bit_size: 1
fieldset/CRYPTO_CMD:
  description: Cryptography Command
  fields:
    - name: START
      description: "SW sets this field to '1' to start a AES-128 forward block cipher operation (on the address in CRYPTO_ADDR). HW sets this field to '0' to indicate that the operation has completed. Once completed, the result of the operation can be read from CRYPTO_RESULT0, ..., CRYPTO_RESULT3. The operation takes roughly 13 clk_hf clock cycles. Note: An operation can only be started in MMIO_MODE."
      bit_offset: 0
      bit_size: 1
fieldset/CRYPTO_INPUT0:
  description: Cryptography input 0
  fields:
    - name: INPUT
      description: "Four Bytes of the plaintext PT[31:0] = CRYPTO_INPUT0.INPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_INPUT1:
  description: Cryptography input 1
  fields:
    - name: INPUT
      description: "Four Bytes of the plaintext PT[63:32] = CRYPTO_INPUT1.INPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_INPUT2:
  description: Cryptography input 2
  fields:
    - name: INPUT
      description: "Four Bytes of the plaintext PT[95:64] = CRYPTO_INPUT2.INPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_INPUT3:
  description: Cryptography input 3
  fields:
    - name: INPUT
      description: "Four Bytes of the plaintext PT[127:96] = CRYPTO_INPUT3.INPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_KEY0:
  description: Cryptography key 0
  fields:
    - name: KEY
      description: "Four Bytes of the key KEY[31:0] = CRYPTO_KEY0.KEY[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_KEY1:
  description: Cryptography key 1
  fields:
    - name: KEY
      description: "Four Bytes of the key KEY[63:32] = CRYPTO_KEY1.KEY[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_KEY2:
  description: Cryptography key 2
  fields:
    - name: KEY
      description: "Four Bytes of the key KEY[95:64] = CRYPTO_KEY2.KEY[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_KEY3:
  description: Cryptography key 3
  fields:
    - name: KEY
      description: "Four Bytes of the key KEY[127:96] = CRYPTO_KEY3.KEY[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_OUTPUT0:
  description: Cryptography output 0
  fields:
    - name: OUTPUT
      description: "Four Bytes of the ciphertext CT[31:0] = CRYPTO_OUTPUT0.OUTPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_OUTPUT1:
  description: Cryptography output 1
  fields:
    - name: OUTPUT
      description: "Four Bytes of the ciphertext CT[63:32] = CRYPTO_OUTPUT1.OUTPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_OUTPUT2:
  description: Cryptography output 2
  fields:
    - name: OUTPUT
      description: "Four Bytes of the ciphertext CT[95:64] = CRYPTO_OUTPUT2.OUTPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/CRYPTO_OUTPUT3:
  description: Cryptography output 3
  fields:
    - name: OUTPUT
      description: "Four Bytes of the ciphertext CT[127:96] = CRYPTO_OUTPUT3.OUTPUT[31:0]."
      bit_offset: 0
      bit_size: 32
fieldset/DEVICE_CTL:
  description: Control
  fields:
    - name: WR_EN
      description: "Write enable: '0': write transfers are not allowed to this device. An attempt to write to this device results in an AHB-Lite bus error. '1': write transfers are allowed to this device."
      bit_offset: 0
      bit_size: 1
    - name: CRYPTO_EN
      description: "Cryptography on read/write accesses: '0': disabled. '1': enabled."
      bit_offset: 8
      bit_size: 1
    - name: DATA_SEL
      description: "Specifies the connection of the IP's data lines (spi_data[0], ..., spi_data[7]) to the device's data lines (SI/IO0, SO/IO1, IO2, IO3, IO4, IO5, IO6, IO7): '0': spi_data[0] = IO0, spi_data[1] = IO1, ..., spi_data[7] = IO7. This value is allowed for single, dual, quad, dual quad and octal SPI modes. This value must be used for the first device in dual quad SPI mode. This value must be used for octal SPI mode. '1': spi_data[2] = IO0, spi_data[3] = IO1. This value is only allowed for single and dual SPI modes. '2': spi_data[4] = IO0, spi_data[5] = IO1, ..., spi_data[7] = IO3. This value is only allowed for single, dual, quad and dual quad SPI modes. In dual quad SPI mode, this value must be used for the second device. '3': spi_data[6] = IO0, spi_data[7] = IO1. This value is only allowed for single and dual SPI modes."
      bit_offset: 16
      bit_size: 2
    - name: ENABLED
      description: "Device enable: '0': Disabled. '1': Enabled."
      bit_offset: 31
      bit_size: 1
fieldset/FAST_CA_CMD:
  description: Fast cache command
  fields:
    - name: INV
      description: See SLOW_CA_CMD.INV.
      bit_offset: 0
      bit_size: 1
fieldset/FAST_CA_CTL:
  description: Fast cache control
  fields:
    - name: WAY
      description: See SLOW_CA_CTL.WAY.
      bit_offset: 16
      bit_size: 2
    - name: SET_ADDR
      description: See SLOW_CA_CTL.SET_ADDR.
      bit_offset: 24
      bit_size: 2
    - name: PREF_EN
      description: See SLOW_CA_CTL.PREF_EN.
      bit_offset: 30
      bit_size: 1
    - name: ENABLED
      description: See SLOW_CA_CTL.ENABLED.
      bit_offset: 31
      bit_size: 1
fieldset/INTR:
  description: Interrupt register
  fields:
    - name: TR_TX_REQ
      description: "Activated in MMIO mode, when a TX data FIFO trigger 'tr_tx_req' is activated."
      bit_offset: 0
      bit_size: 1
    - name: TR_RX_REQ
      description: "Activated in MMIO mode, when a RX data FIFO trigger 'tr_rx_req' is activated."
      bit_offset: 1
      bit_size: 1
    - name: XIP_ALIGNMENT_ERROR
      description: "Activated in XIP mode, if: - The selected device's ADDR_CTL.DIV2 is '1' and the AHB-Lite bus transfer address is not a multiple of 2. - The selected device's ADDR_CTL.DIV2 is '1' and the XIP transfer request is NOT for a multiple of 2 Bytes. Note: In dual-quad SPI mode (ADDR_CTL.DIV is '1'), each memory device contributes a 4-bit nibble for read data or write data. This is only possible if the request address is a multiple of 2 and the number of requested Bytes is a multiple of 2."
      bit_offset: 2
      bit_size: 1
    - name: TX_CMD_FIFO_OVERFLOW
      description: "Activated in MMIO mode, on an AHB-Lite write transfer to the TX command FIFO (TX_CMD_FIFO_WR) with not enough free entries available."
      bit_offset: 3
      bit_size: 1
    - name: TX_DATA_FIFO_OVERFLOW
      description: "Activated in MMIO mode, on an AHB-Lite write transfer to the TX data FIFO (TX_DATA_FIFO_WR1, TX_DATA_FIFO_WR2, TX_DATA_FIFO_WR4) with not enough free entries available."
      bit_offset: 4
      bit_size: 1
    - name: RX_DATA_FIFO_UNDERFLOW
      description: "Activated in MMIO mode, on an AHB-Lite read transfer from the RX data FIFO (RX_DATA_FIFO_RD1, RX_DATA_FIFO_RD2, RX_DATA_FIFO_RD4) with not enough entries available. Only activated for NON test bus controller transfers."
      bit_offset: 5
      bit_size: 1
fieldset/INTR_MASK:
  description: Interrupt mask register
  fields:
    - name: TR_TX_REQ
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 0
      bit_size: 1
    - name: TR_RX_REQ
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 1
      bit_size: 1
    - name: XIP_ALIGNMENT_ERROR
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 2
      bit_size: 1
    - name: TX_CMD_FIFO_OVERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 3
      bit_size: 1
    - name: TX_DATA_FIFO_OVERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 4
      bit_size: 1
    - name: RX_DATA_FIFO_UNDERFLOW
      description: Mask bit for corresponding bit in interrupt request register.
      bit_offset: 5
      bit_size: 1
fieldset/INTR_MASKED:
  description: Interrupt masked register
  fields:
    - name: TR_TX_REQ
      description: Logical and of corresponding request and mask bits.
      bit_offset: 0
      bit_size: 1
    - name: TR_RX_REQ
      description: Logical and of corresponding request and mask bits.
      bit_offset: 1
      bit_size: 1
    - name: XIP_ALIGNMENT_ERROR
      description: Logical and of corresponding request and mask bits.
      bit_offset: 2
      bit_size: 1
    - name: TX_CMD_FIFO_OVERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 3
      bit_size: 1
    - name: TX_DATA_FIFO_OVERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 4
      bit_size: 1
    - name: RX_DATA_FIFO_UNDERFLOW
      description: Logical and of corresponding request and mask bits.
      bit_offset: 5
      bit_size: 1
fieldset/INTR_SET:
  description: Interrupt set register
  fields:
    - name: TR_TX_REQ
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 0
      bit_size: 1
    - name: TR_RX_REQ
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 1
      bit_size: 1
    - name: XIP_ALIGNMENT_ERROR
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 2
      bit_size: 1
    - name: TX_CMD_FIFO_OVERFLOW
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 3
      bit_size: 1
    - name: TX_DATA_FIFO_OVERFLOW
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 4
      bit_size: 1
    - name: RX_DATA_FIFO_UNDERFLOW
      description: "Write with '1' to set corresponding bit in interrupt request register."
      bit_offset: 5
      bit_size: 1
fieldset/MASK:
  description: Device region mask
  fields:
    - name: MASK
      description: "Specifies the size of the device region. All '1' bits are used to compare the incoming transfer request address A[31:0] with the address as specified in ADDR.ADDR: Address A is in the device when (A[31:8] & MASK[31:8]) == ADDR.ADDR[31:8]. The most significant bit fields are constants and set to'1'. The most significant bits are identified on the SMIF_XIP_MASK parameter. E.g., if SMIF_XIP_MASK is 0xff00:0000 (16 MB XIP memory region), MASK[31:24] = 0xff. Note: a transfer request that is not in any device region results in an AHB-Lite bus error."
      bit_offset: 8
      bit_size: 24
fieldset/RD_ADDR_CTL:
  description: Read address control
  fields:
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
fieldset/RD_CMD_CTL:
  description: Read command control
  fields:
    - name: CODE
      description: Command byte code.
      bit_offset: 0
      bit_size: 8
    - name: WIDTH
      description: "Width of data transfer: '0': 1 bit/cycle (single data transfer). '1': 2 bits/cycle (dual data transfer). '2': 4 bits/cycle (quad data transfer). '3': 8 bits/cycle (octal data transfer)."
      bit_offset: 16
      bit_size: 2
    - name: PRESENT
      description: "Presence of command field: '0': not present '1': present"
      bit_offset: 31
      bit_size: 1
fieldset/RD_DATA_CTL:
  description: Read data control
  fields:
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
fieldset/RD_DUMMY_CTL:
  description: Read dummy control
  fields:
    - name: SIZE5
      description: "Number of dummy cycles (minus 1): '0': 1 cycles ... '31': 32 cycles. Note: this field specifies dummy cycles, not dummy Bytes!"
      bit_offset: 0
      bit_size: 5
    - name: PRESENT
      description: "Presence of dummy cycles: '0': not present '1': present"
      bit_offset: 31
      bit_size: 1
fieldset/RD_MODE_CTL:
  description: Read mode control
  fields:
    - name: CODE
      description: Mode byte code.
      bit_offset: 0
      bit_size: 8
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
    - name: PRESENT
      description: "Presence of mode field: '0': not present '1': present"
      bit_offset: 31
      bit_size: 1
fieldset/RX_DATA_FIFO_CTL:
  description: Receiver data FIFO control
  fields:
    - name: TRIGGER_LEVEL
      description: "Determines when RX data FIFO 'tr_rx_req' trigger is activated (trigger activation requires MMIO_MODE, the trigger is NOT activated in XIP_MODE): - Trigger is active when RX_DATA_FIFO_STATUS.USED > TRIGGER_LEVEL."
      bit_offset: 0
      bit_size: 3
fieldset/RX_DATA_FIFO_RD1:
  description: Receiver data FIFO read
  fields:
    - name: DATA0
      description: RX data (read from RX data FIFO).
      bit_offset: 0
      bit_size: 8
fieldset/RX_DATA_FIFO_RD1_SILENT:
  description: Receiver data FIFO silent read
  fields:
    - name: DATA0
      description: RX data (read from RX data FIFO).
      bit_offset: 0
      bit_size: 8
fieldset/RX_DATA_FIFO_RD2:
  description: Receiver data FIFO read
  fields:
    - name: DATA0
      description: "RX data (read from RX data FIFO, first byte)."
      bit_offset: 0
      bit_size: 8
    - name: DATA1
      description: "RX data (read from RX data FIFO, second byte)."
      bit_offset: 8
      bit_size: 8
fieldset/RX_DATA_FIFO_RD4:
  description: Receiver data FIFO read
  fields:
    - name: DATA0
      description: "RX data (read from RX data FIFO, first byte)."
      bit_offset: 0
      bit_size: 8
    - name: DATA1
      description: "RX data (read from RX data FIFO, second byte)."
      bit_offset: 8
      bit_size: 8
    - name: DATA2
      description: "RX data (read from RX data FIFO, third byte)."
      bit_offset: 16
      bit_size: 8
    - name: DATA3
      description: "RX data (read from RX data FIFO, fourth byte)."
      bit_offset: 24
      bit_size: 8
fieldset/RX_DATA_FIFO_STATUS:
  description: Receiver data FIFO status
  fields:
    - name: USED4
      description: "Number of entries that are used in the RX data FIFO (available in both XIP_MODE and MMIO_MODE). Legal range: [0, 8]."
      bit_offset: 0
      bit_size: 4
fieldset/SLOW_CA_CMD:
  description: Slow cache command
  fields:
    - name: INV
      description: "Cache and prefetch buffer invalidation. SW writes a '1' to clear the cache and prefetch buffer. The cache's LRU structure is also reset to its default state. Note, A write access will invalidate the prefetch buffer automatically in hardware. A write access should invalidate both fast and slow caches, by firmware. Note, firmware should invalidate the cache and prefetch buffer only when STATUS.BUSY is '0'."
      bit_offset: 0
      bit_size: 1
fieldset/SLOW_CA_CTL:
  description: Slow cache control
  fields:
    - name: WAY
      description: Specifies the cache way for which cache information is provided in SLOW_CA_STATUS0/1/2.
      bit_offset: 16
      bit_size: 2
    - name: SET_ADDR
      description: Specifies the cache set for which cache information is provided in SLOW_CA_STATUS0/1/2.
      bit_offset: 24
      bit_size: 2
    - name: PREF_EN
      description: "Prefetch enable: '0': Disabled. '1': Enabled. Prefetching requires the cache to be enabled; i.e. ENABLED is '1'."
      bit_offset: 30
      bit_size: 1
    - name: ENABLED
      description: "Cache enable: '0': Disabled. '1': Enabled."
      bit_offset: 31
      bit_size: 1
fieldset/SMIF0_CTL:
  description: Control
  fields:
    - name: XIP_MODE
      description: "Mode of operation. Note: this field should only be changed when the IP is disabled or when STATUS.BUSY is '0' and SW should not be executing from the XIP interface or MMIO interface."
      bit_offset: 0
      bit_size: 1
      enum: XIP_MODE
    - name: CLOCK_IF_RX_SEL
      description: "Specifies device interface receiver clock 'clk_if_rx' source. MISO data is captured on the rising edge of 'clk_if_rx'. '0': 'spi_clk_out' (internal clock) '1': !'spi_clk_out' (internal clock) '2': 'spi_clk_in' (feedback clock) '3': !'spi_clk_in' (feedback clock) Note: the device interface transmitter clock 'clk_if_tx' is fixed and is 'spi_clk_out' MOSI data is driven on the falling edge of 'clk_if_tx'."
      bit_offset: 12
      bit_size: 2
    - name: DESELECT_DELAY
      description: "Specifies the minimum duration of SPI deselection ('spi_select_out[]' is high/'1') in between SPI transfers: '0': 1 interface clock cycle. '1': 2 interface clock cycles. '2': 3 interface clock cycles. '3': 4 interface clock cycles. '4': 5 interface clock cycles. '5': 6 interface clock cycles. '6': 7 interface clock cycles. '7': 8 interface clock cycles. During SPI deselection, 'spi_select_out[]' are '1'/inactive, 'spi_data_out[]' are '1' and 'spi_clk_out' is '0'/inactive."
      bit_offset: 16
      bit_size: 3
    - name: BLOCK
      description: "Specifies what happens for MMIO interface read accesses to an empty RX data FIFO or to a full TX format/data FIFO. Note: the FIFOs can only be accessed in MMIO_MODE. This field is not used for test controller accesses."
      bit_offset: 24
      bit_size: 1
      enum: BLOCK
    - name: ENABLED
      description: "IP enable: '0': Disabled. All non-retention registers are reset to their default value when the IP is disabled. When the IP is disabled, the XIP accesses produce AHB-Lite bus errors. '1': Enabled. Note: Before disabling the IP, SW should ensure that the IP is NOT busy (STATUS.BUSY is '0'), otherwise illegal interface transfers may occur."
      bit_offset: 31
      bit_size: 1
      enum: ENABLED
fieldset/STATUS:
  description: Status
  fields:
    - name: BUSY
      description: "Cache, cryptography, XIP, device interface or any other logic busy in the IP: '0': not busy '1': busy When BUSY is '0', the IP can be safely disabled without: - the potential loss of transient write data. - the potential risk of aborting an inflight SPI device interface transfer. When BUSY is '0', the mode of operation (XIP_MODE or MMIO_MODE) can be safely changed."
      bit_offset: 31
      bit_size: 1
fieldset/TX_CMD_FIFO_STATUS:
  description: Transmitter command FIFO status
  fields:
    - name: USED3
      description: "Number of entries that are used in the TX command FIFO (available in both XIP_MODE and MMIO_MODE). Legal range: [0, 4]."
      bit_offset: 0
      bit_size: 3
fieldset/TX_CMD_FIFO_WR:
  description: Transmitter command FIFO write
  fields:
    - name: DATA20
      description: "Command data. The higher two bits DATA[19:18] specify the specific command '0'/TX: A SPI transfer always start with a TX command FIFO entry of the 'TX' format. - DATA[17:16] specifies the width of the data transfer: - '0': 1 bit/cycle (single data transfer). - '1': 2 bits/cycle (dual data transfer). - '2': 4 bits/cycle (quad data transfer). - '3': 8 bits/cycle (octal data transfer). - DATA[15]: specifies whether this is the last TX Byte; i.e. whether the 'spi_select_out[3:0]' IO output signals are de-activated after the transfer. - DATA[11:8] specifies which of the four devices are selected. DATA[11:8] are directly mapped to 'spi_select_out[3:0]'. Two devices can be selected at the same time in dual-quad mode. - '0': device deselected - '1': device selected - DATA[7:0] specifies the transmitted Byte. '1'/TX_COUNT: The 'TX_COUNT' command relies on the TX data FIFO to provide the transmitted bytes. The 'TX_COUNT' command is ALWAYS considered to be the last command of a SPI data transfers. - DATA[17:16] specifies the width of the transfer. - DATA[15:0] specifies the number of to be transmitted Bytes (minus 1) from the TX data FIFO. '2'/RX_COUNT: The 'RX_COUNT' command relies on the RX data FIFO to accept the received bytes. The 'RX_COUNT' command is ALWAYS considered to be the last command of a SPI data transfers. - DATA[17:16] specifies the width of the transfer. - DATA[15:0] specifies the number of to be transmitted Bytes (minus 1) to the RX data FIFO. '3'/DUMMY_COUNT: The 'DUMMY_COUNT' command conveys dummy cycles. Dummy cycles are used to implement a Turn-Around time in which the SPI master changes from a transmitter driving the data lines to a receiver receiving on the same data lines. The 'DUMMY_COUNT' command is ALWAYS considered to be NOT the last command of a SPI data transfers; i.e. it needs to be followed by another command. - DATA[15:0] specifies the number of dummy cycles (minus 1). In dummy cycles, the data lines are not driven."
      bit_offset: 0
      bit_size: 20
fieldset/TX_DATA_FIFO_CTL:
  description: Transmitter data FIFO control
  fields:
    - name: TRIGGER_LEVEL
      description: "Determines when the TX data FIFO 'tr_tx_req' trigger is activated (trigger activation requires MMIO_MODE, the trigger is NOT activated in XIP_MODE): - Trigger is active when TX_DATA_FIFO_STATUS.USED <= TRIGGER_LEVEL."
      bit_offset: 0
      bit_size: 3
fieldset/TX_DATA_FIFO_STATUS:
  description: Transmitter data FIFO status
  fields:
    - name: USED4
      description: "Number of entries that are used in the TX data FIFO (available in both XIP_MODE and MMIO_MODE). Legal range: [0, 8]."
      bit_offset: 0
      bit_size: 4
fieldset/TX_DATA_FIFO_WR1:
  description: Transmitter data FIFO write
  fields:
    - name: DATA0
      description: TX data (written to TX data FIFO).
      bit_offset: 0
      bit_size: 8
fieldset/TX_DATA_FIFO_WR2:
  description: Transmitter data FIFO write
  fields:
    - name: DATA0
      description: "TX data (written to TX data FIFO, first byte)."
      bit_offset: 0
      bit_size: 8
    - name: DATA1
      description: "TX data (written to TX data FIFO, second byte)."
      bit_offset: 8
      bit_size: 8
fieldset/TX_DATA_FIFO_WR4:
  description: Transmitter data FIFO write
  fields:
    - name: DATA0
      description: "TX data (written to TX data FIFO, first byte)."
      bit_offset: 0
      bit_size: 8
    - name: DATA1
      description: "TX data (written to TX data FIFO, second byte)."
      bit_offset: 8
      bit_size: 8
    - name: DATA2
      description: "TX data (written to TX data FIFO, third byte)."
      bit_offset: 16
      bit_size: 8
    - name: DATA3
      description: "TX data (written to TX data FIFO, fourth byte)."
      bit_offset: 24
      bit_size: 8
fieldset/WR_ADDR_CTL:
  description: Write address control
  fields:
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
fieldset/WR_CMD_CTL:
  description: Write command control
  fields:
    - name: CODE
      description: Command byte code.
      bit_offset: 0
      bit_size: 8
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
    - name: PRESENT
      description: "Presence of command field: '0': not present '1': present"
      bit_offset: 31
      bit_size: 1
fieldset/WR_DATA_CTL:
  description: Write data control
  fields:
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
fieldset/WR_DUMMY_CTL:
  description: Write dummy control
  fields:
    - name: SIZE5
      description: "Number of dummy cycles (minus 1): '0': 1 cycles ... '31': 32 cycles."
      bit_offset: 0
      bit_size: 5
    - name: PRESENT
      description: "Presence of dummy cycles: '0': not present '1': present"
      bit_offset: 31
      bit_size: 1
fieldset/WR_MODE_CTL:
  description: Write mode control
  fields:
    - name: CODE
      description: Mode byte code.
      bit_offset: 0
      bit_size: 8
    - name: WIDTH
      description: Width of transfer.
      bit_offset: 16
      bit_size: 2
    - name: PRESENT
      description: "Presence of mode field: '0': not present '1': present"
      bit_offset: 31
      bit_size: 1
enum/BLOCK:
  bit_size: 1
  variants:
    - name: BUS_ERROR
      description: "0': Generate an AHB-Lite bus error. This option is useful when SW decides to use polling on STATUS.TR_BUSY to determine if a interface transfer is no longer busy (transfer is completed). This option adds SW complexity, but limits the number of AHB-Lite wait states (and limits ISR latency)."
      value: 0
    - name: WAIT_STATES
      description: "1': Introduce wait states. This setting potentially locks up the AHB-Lite infrastructure and may increase the CPU interrupt latency.This option is useful when SW performs TX/RX data FIFO accesses immediately after a command is setup using the TX format FIFO. This option has low SW complexity, but may result in a significant number of AHB-Lite wait states (and may increase ISR latency)."
      value: 1
enum/ENABLED:
  bit_size: 1
  variants:
    - name: DISABLED
      description: N/A
      value: 0
    - name: ENABLED
      description: N/A
      value: 1
enum/XIP_MODE:
  bit_size: 1
  variants:
    - name: MMIO_MODE
      description: "'0': MMIO mode. Individual MMIO accesses to TX and RX FIFOs are used to generate a sequence of SPI transfers. This mode of operation allows for large flexibility in terms of the SPI transfers that can be generated."
      value: 0
    - name: XIP_MODE
      description: "1': XIP mode. eXecute-In-Place mode: incoming read and write transfers over the AHB-Lite bus infrastructure are automatically translated in SPI transfers to read data from and write data to a device. This mode of operation allow for efficient device read and write operations. This mode is only supported in SPI_MODE."
      value: 1
